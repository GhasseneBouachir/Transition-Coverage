package(default_visibility = ["//ortools/math_opt:__subpackages__"])

cc_library(
    name = "math_opt_proto_utils",
    srcs = ["math_opt_proto_utils.cc"],
    hdrs = ["math_opt_proto_utils.h"],
    deps = [
        ":sparse_vector_view",
        "//ortools/base",
        "//ortools/math_opt:callback_cc_proto",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "@com_google_absl//absl/container:flat_hash_set",
    ],
)

cc_library(
    name = "sparse_vector_view",
    hdrs = ["sparse_vector_view.h"],
    deps = [
        ":arrow_operator_proxy",
        ":sparse_vector",
        "//ortools/base",
        "//ortools/base:map_util",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/types:span",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "model_summary",
    srcs = ["model_summary.cc"],
    hdrs = ["model_summary.h"],
    deps = [
        "//ortools/base",
        "//ortools/base:linked_hash_map",
        "//ortools/base:map_util",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "model_storage",
    srcs = ["model_storage.cc"],
    hdrs = ["model_storage.h"],
    deps = [
        ":model_update_merge",
        ":sparse_vector_view",
        "//ortools/base",
        "//ortools/base:intops",
        "//ortools/base:map_util",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/math_opt:solution_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "//ortools/math_opt/validators:model_validator",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/meta:type_traits",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/types:span",
    ],
)

cc_library(
    name = "solver_interface",
    srcs = ["solver_interface.cc"],
    hdrs = ["solver_interface.h"],
    deps = [
        ":non_streamable_solver_init_arguments",
        ":solve_interrupter",
        "//ortools/base",
        "//ortools/base:map_util",
        "//ortools/math_opt:callback_cc_proto",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_parameters_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:parameters_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/port:proto_utils",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "solver",
    srcs = ["solver.cc"],
    hdrs = ["solver.h"],
    deps = [
        ":model_summary",
        ":non_streamable_solver_init_arguments",
        ":solve_interrupter",
        ":solver_debug",
        ":solver_interface",
        "//ortools/base",
        "//ortools/base:status_macros",
        "//ortools/math_opt:callback_cc_proto",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_parameters_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:parameters_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/math_opt/validators:callback_validator",
        "//ortools/math_opt/validators:model_parameters_validator",
        "//ortools/math_opt/validators:model_validator",
        "//ortools/math_opt/validators:result_validator",
        "//ortools/math_opt/validators:solve_parameters_validator",
        "//ortools/port:proto_utils",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/types:span",
    ],
)

cc_library(
    name = "model_update_merge",
    srcs = ["model_update_merge.cc"],
    hdrs = ["model_update_merge.h"],
    deps = [
        ":sparse_vector_view",
        "//ortools/base",
        "//ortools/base:protobuf_util",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "@com_google_absl//absl/container:flat_hash_set",
    ],
)

cc_library(
    name = "solve_interrupter",
    srcs = ["solve_interrupter.cc"],
    hdrs = ["solve_interrupter.h"],
    deps = [
        "//ortools/base",
        "//ortools/base:intops",
        "//ortools/base:linked_hash_map",
        "//ortools/base:map_util",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "non_streamable_solver_init_arguments",
    hdrs = ["non_streamable_solver_init_arguments.h"],
    deps = ["//ortools/math_opt:parameters_cc_proto"],
)

cc_library(
    name = "solver_debug",
    srcs = ["solver_debug.cc"],
    hdrs = ["solver_debug.h"],
)

cc_library(
    name = "arrow_operator_proxy",
    hdrs = ["arrow_operator_proxy.h"],
)

cc_library(
    name = "sparse_vector",
    hdrs = ["sparse_vector.h"],
)

cc_library(
    name = "sparse_submatrix",
    srcs = ["sparse_submatrix.cc"],
    hdrs = ["sparse_submatrix.h"],
    deps = [
        ":sparse_vector",
        ":sparse_vector_view",
        "//ortools/base",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/types:span",
    ],
)

cc_library(
    name = "inverted_bounds",
    srcs = ["inverted_bounds.cc"],
    hdrs = ["inverted_bounds.h"],
    deps = [
        "//ortools/base:status_builder",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
    ],
)
