// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/assignment.proto

#include "ortools/constraint_solver/assignment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace operations_research {
constexpr IntVarAssignment::IntVarAssignment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , min_(int64_t{0})
  , max_(int64_t{0})
  , active_(false){}
struct IntVarAssignmentDefaultTypeInternal {
  constexpr IntVarAssignmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntVarAssignmentDefaultTypeInternal() {}
  union {
    IntVarAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntVarAssignmentDefaultTypeInternal _IntVarAssignment_default_instance_;
constexpr IntervalVarAssignment::IntervalVarAssignment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_min_(int64_t{0})
  , start_max_(int64_t{0})
  , duration_min_(int64_t{0})
  , duration_max_(int64_t{0})
  , end_min_(int64_t{0})
  , end_max_(int64_t{0})
  , performed_min_(int64_t{0})
  , performed_max_(int64_t{0})
  , active_(false){}
struct IntervalVarAssignmentDefaultTypeInternal {
  constexpr IntervalVarAssignmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntervalVarAssignmentDefaultTypeInternal() {}
  union {
    IntervalVarAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntervalVarAssignmentDefaultTypeInternal _IntervalVarAssignment_default_instance_;
constexpr SequenceVarAssignment::SequenceVarAssignment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_sequence_()
  , _forward_sequence_cached_byte_size_(0)
  , backward_sequence_()
  , _backward_sequence_cached_byte_size_(0)
  , unperformed_()
  , _unperformed_cached_byte_size_(0)
  , var_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , active_(false){}
struct SequenceVarAssignmentDefaultTypeInternal {
  constexpr SequenceVarAssignmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SequenceVarAssignmentDefaultTypeInternal() {}
  union {
    SequenceVarAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SequenceVarAssignmentDefaultTypeInternal _SequenceVarAssignment_default_instance_;
constexpr WorkerInfo::WorkerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bns_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , worker_id_(0){}
struct WorkerInfoDefaultTypeInternal {
  constexpr WorkerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkerInfoDefaultTypeInternal() {}
  union {
    WorkerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkerInfoDefaultTypeInternal _WorkerInfo_default_instance_;
constexpr AssignmentProto::AssignmentProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : int_var_assignment_()
  , interval_var_assignment_()
  , sequence_var_assignment_()
  , objective_(nullptr)
  , worker_info_(nullptr)
  , is_valid_(false){}
struct AssignmentProtoDefaultTypeInternal {
  constexpr AssignmentProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssignmentProtoDefaultTypeInternal() {}
  union {
    AssignmentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssignmentProtoDefaultTypeInternal _AssignmentProto_default_instance_;
}  // namespace operations_research
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fconstraint_5fsolver_2fassignment_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2fassignment_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fconstraint_5fsolver_2fassignment_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::IntVarAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::IntVarAssignment, var_id_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntVarAssignment, min_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntVarAssignment, max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntVarAssignment, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, var_id_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, start_min_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, start_max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, duration_min_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, duration_max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, end_min_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, end_max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, performed_min_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, performed_max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::IntervalVarAssignment, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::SequenceVarAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::SequenceVarAssignment, var_id_),
  PROTOBUF_FIELD_OFFSET(::operations_research::SequenceVarAssignment, forward_sequence_),
  PROTOBUF_FIELD_OFFSET(::operations_research::SequenceVarAssignment, backward_sequence_),
  PROTOBUF_FIELD_OFFSET(::operations_research::SequenceVarAssignment, unperformed_),
  PROTOBUF_FIELD_OFFSET(::operations_research::SequenceVarAssignment, active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::WorkerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::WorkerInfo, worker_id_),
  PROTOBUF_FIELD_OFFSET(::operations_research::WorkerInfo, bns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::AssignmentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::AssignmentProto, int_var_assignment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::AssignmentProto, interval_var_assignment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::AssignmentProto, sequence_var_assignment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::AssignmentProto, objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::AssignmentProto, worker_info_),
  PROTOBUF_FIELD_OFFSET(::operations_research::AssignmentProto, is_valid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::IntVarAssignment)},
  { 10, -1, -1, sizeof(::operations_research::IntervalVarAssignment)},
  { 26, -1, -1, sizeof(::operations_research::SequenceVarAssignment)},
  { 37, -1, -1, sizeof(::operations_research::WorkerInfo)},
  { 45, -1, -1, sizeof(::operations_research::AssignmentProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::_IntVarAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::_IntervalVarAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::_SequenceVarAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::_WorkerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::_AssignmentProto_default_instance_),
};

const char descriptor_table_protodef_ortools_2fconstraint_5fsolver_2fassignment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*ortools/constraint_solver/assignment.p"
  "roto\022\023operations_research\"L\n\020IntVarAssig"
  "nment\022\016\n\006var_id\030\001 \001(\t\022\013\n\003min\030\002 \001(\003\022\013\n\003ma"
  "x\030\003 \001(\003\022\016\n\006active\030\004 \001(\010\"\331\001\n\025IntervalVarA"
  "ssignment\022\016\n\006var_id\030\001 \001(\t\022\021\n\tstart_min\030\002"
  " \001(\003\022\021\n\tstart_max\030\003 \001(\003\022\024\n\014duration_min\030"
  "\004 \001(\003\022\024\n\014duration_max\030\005 \001(\003\022\017\n\007end_min\030\006"
  " \001(\003\022\017\n\007end_max\030\007 \001(\003\022\025\n\rperformed_min\030\010"
  " \001(\003\022\025\n\rperformed_max\030\t \001(\003\022\016\n\006active\030\n "
  "\001(\010\"\201\001\n\025SequenceVarAssignment\022\016\n\006var_id\030"
  "\001 \001(\t\022\030\n\020forward_sequence\030\002 \003(\005\022\031\n\021backw"
  "ard_sequence\030\003 \003(\005\022\023\n\013unperformed\030\004 \003(\005\022"
  "\016\n\006active\030\005 \001(\010\",\n\nWorkerInfo\022\021\n\tworker_"
  "id\030\001 \001(\005\022\013\n\003bns\030\002 \001(\t\"\360\002\n\017AssignmentProt"
  "o\022A\n\022int_var_assignment\030\001 \003(\0132%.operatio"
  "ns_research.IntVarAssignment\022K\n\027interval"
  "_var_assignment\030\002 \003(\0132*.operations_resea"
  "rch.IntervalVarAssignment\022K\n\027sequence_va"
  "r_assignment\030\006 \003(\0132*.operations_research"
  ".SequenceVarAssignment\0228\n\tobjective\030\003 \001("
  "\0132%.operations_research.IntVarAssignment"
  "\0224\n\013worker_info\030\004 \001(\0132\037.operations_resea"
  "rch.WorkerInfo\022\020\n\010is_valid\030\005 \001(\010b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto = {
  false, false, 920, descriptor_table_protodef_ortools_2fconstraint_5fsolver_2fassignment_2eproto, "ortools/constraint_solver/assignment.proto", 
  &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto::offsets,
  file_level_metadata_ortools_2fconstraint_5fsolver_2fassignment_2eproto, file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2fassignment_2eproto, file_level_service_descriptors_ortools_2fconstraint_5fsolver_2fassignment_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_getter() {
  return &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ortools_2fconstraint_5fsolver_2fassignment_2eproto(&descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto);
namespace operations_research {

// ===================================================================

class IntVarAssignment::_Internal {
 public:
};

IntVarAssignment::IntVarAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.IntVarAssignment)
}
IntVarAssignment::IntVarAssignment(const IntVarAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_id().empty()) {
    var_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&min_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:operations_research.IntVarAssignment)
}

inline void IntVarAssignment::SharedCtor() {
var_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&min_)) + sizeof(active_));
}

IntVarAssignment::~IntVarAssignment() {
  // @@protoc_insertion_point(destructor:operations_research.IntVarAssignment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IntVarAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IntVarAssignment::ArenaDtor(void* object) {
  IntVarAssignment* _this = reinterpret_cast< IntVarAssignment* >(object);
  (void)_this;
}
void IntVarAssignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntVarAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntVarAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.IntVarAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_id_.ClearToEmpty();
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&min_)) + sizeof(active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntVarAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.IntVarAssignment.var_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntVarAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.IntVarAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var_id = 1;
  if (!this->_internal_var_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_id().data(), static_cast<int>(this->_internal_var_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.IntVarAssignment.var_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var_id(), target);
  }

  // int64 min = 2;
  if (this->_internal_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_min(), target);
  }

  // int64 max = 3;
  if (this->_internal_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max(), target);
  }

  // bool active = 4;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.IntVarAssignment)
  return target;
}

size_t IntVarAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.IntVarAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_id = 1;
  if (!this->_internal_var_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_id());
  }

  // int64 min = 2;
  if (this->_internal_min() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_min());
  }

  // int64 max = 3;
  if (this->_internal_max() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max());
  }

  // bool active = 4;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntVarAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntVarAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntVarAssignment::GetClassData() const { return &_class_data_; }

void IntVarAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntVarAssignment *>(to)->MergeFrom(
      static_cast<const IntVarAssignment &>(from));
}


void IntVarAssignment::MergeFrom(const IntVarAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.IntVarAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_id().empty()) {
    _internal_set_var_id(from._internal_var_id());
  }
  if (from._internal_min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from._internal_max() != 0) {
    _internal_set_max(from._internal_max());
  }
  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntVarAssignment::CopyFrom(const IntVarAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.IntVarAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVarAssignment::IsInitialized() const {
  return true;
}

void IntVarAssignment::InternalSwap(IntVarAssignment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var_id_, lhs_arena,
      &other->var_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntVarAssignment, active_)
      + sizeof(IntVarAssignment::active_)
      - PROTOBUF_FIELD_OFFSET(IntVarAssignment, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntVarAssignment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2fassignment_2eproto[0]);
}

// ===================================================================

class IntervalVarAssignment::_Internal {
 public:
};

IntervalVarAssignment::IntervalVarAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.IntervalVarAssignment)
}
IntervalVarAssignment::IntervalVarAssignment(const IntervalVarAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_id().empty()) {
    var_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_min_, &from.start_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&start_min_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:operations_research.IntervalVarAssignment)
}

inline void IntervalVarAssignment::SharedCtor() {
var_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&start_min_)) + sizeof(active_));
}

IntervalVarAssignment::~IntervalVarAssignment() {
  // @@protoc_insertion_point(destructor:operations_research.IntervalVarAssignment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IntervalVarAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IntervalVarAssignment::ArenaDtor(void* object) {
  IntervalVarAssignment* _this = reinterpret_cast< IntervalVarAssignment* >(object);
  (void)_this;
}
void IntervalVarAssignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntervalVarAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntervalVarAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.IntervalVarAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_id_.ClearToEmpty();
  ::memset(&start_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&start_min_)) + sizeof(active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntervalVarAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.IntervalVarAssignment.var_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          start_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          start_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration_min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          duration_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          duration_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          end_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          end_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 performed_min = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          performed_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 performed_max = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          performed_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool active = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntervalVarAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.IntervalVarAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var_id = 1;
  if (!this->_internal_var_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_id().data(), static_cast<int>(this->_internal_var_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.IntervalVarAssignment.var_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var_id(), target);
  }

  // int64 start_min = 2;
  if (this->_internal_start_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_start_min(), target);
  }

  // int64 start_max = 3;
  if (this->_internal_start_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_start_max(), target);
  }

  // int64 duration_min = 4;
  if (this->_internal_duration_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_duration_min(), target);
  }

  // int64 duration_max = 5;
  if (this->_internal_duration_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_duration_max(), target);
  }

  // int64 end_min = 6;
  if (this->_internal_end_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_end_min(), target);
  }

  // int64 end_max = 7;
  if (this->_internal_end_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_end_max(), target);
  }

  // int64 performed_min = 8;
  if (this->_internal_performed_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_performed_min(), target);
  }

  // int64 performed_max = 9;
  if (this->_internal_performed_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_performed_max(), target);
  }

  // bool active = 10;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.IntervalVarAssignment)
  return target;
}

size_t IntervalVarAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.IntervalVarAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_id = 1;
  if (!this->_internal_var_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_id());
  }

  // int64 start_min = 2;
  if (this->_internal_start_min() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_start_min());
  }

  // int64 start_max = 3;
  if (this->_internal_start_max() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_start_max());
  }

  // int64 duration_min = 4;
  if (this->_internal_duration_min() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_duration_min());
  }

  // int64 duration_max = 5;
  if (this->_internal_duration_max() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_duration_max());
  }

  // int64 end_min = 6;
  if (this->_internal_end_min() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_end_min());
  }

  // int64 end_max = 7;
  if (this->_internal_end_max() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_end_max());
  }

  // int64 performed_min = 8;
  if (this->_internal_performed_min() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_performed_min());
  }

  // int64 performed_max = 9;
  if (this->_internal_performed_max() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_performed_max());
  }

  // bool active = 10;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntervalVarAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntervalVarAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntervalVarAssignment::GetClassData() const { return &_class_data_; }

void IntervalVarAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntervalVarAssignment *>(to)->MergeFrom(
      static_cast<const IntervalVarAssignment &>(from));
}


void IntervalVarAssignment::MergeFrom(const IntervalVarAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.IntervalVarAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_id().empty()) {
    _internal_set_var_id(from._internal_var_id());
  }
  if (from._internal_start_min() != 0) {
    _internal_set_start_min(from._internal_start_min());
  }
  if (from._internal_start_max() != 0) {
    _internal_set_start_max(from._internal_start_max());
  }
  if (from._internal_duration_min() != 0) {
    _internal_set_duration_min(from._internal_duration_min());
  }
  if (from._internal_duration_max() != 0) {
    _internal_set_duration_max(from._internal_duration_max());
  }
  if (from._internal_end_min() != 0) {
    _internal_set_end_min(from._internal_end_min());
  }
  if (from._internal_end_max() != 0) {
    _internal_set_end_max(from._internal_end_max());
  }
  if (from._internal_performed_min() != 0) {
    _internal_set_performed_min(from._internal_performed_min());
  }
  if (from._internal_performed_max() != 0) {
    _internal_set_performed_max(from._internal_performed_max());
  }
  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntervalVarAssignment::CopyFrom(const IntervalVarAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.IntervalVarAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalVarAssignment::IsInitialized() const {
  return true;
}

void IntervalVarAssignment::InternalSwap(IntervalVarAssignment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var_id_, lhs_arena,
      &other->var_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntervalVarAssignment, active_)
      + sizeof(IntervalVarAssignment::active_)
      - PROTOBUF_FIELD_OFFSET(IntervalVarAssignment, start_min_)>(
          reinterpret_cast<char*>(&start_min_),
          reinterpret_cast<char*>(&other->start_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntervalVarAssignment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2fassignment_2eproto[1]);
}

// ===================================================================

class SequenceVarAssignment::_Internal {
 public:
};

SequenceVarAssignment::SequenceVarAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  forward_sequence_(arena),
  backward_sequence_(arena),
  unperformed_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.SequenceVarAssignment)
}
SequenceVarAssignment::SequenceVarAssignment(const SequenceVarAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      forward_sequence_(from.forward_sequence_),
      backward_sequence_(from.backward_sequence_),
      unperformed_(from.unperformed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_id().empty()) {
    var_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var_id(), 
      GetArenaForAllocation());
  }
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:operations_research.SequenceVarAssignment)
}

inline void SequenceVarAssignment::SharedCtor() {
var_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
active_ = false;
}

SequenceVarAssignment::~SequenceVarAssignment() {
  // @@protoc_insertion_point(destructor:operations_research.SequenceVarAssignment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SequenceVarAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SequenceVarAssignment::ArenaDtor(void* object) {
  SequenceVarAssignment* _this = reinterpret_cast< SequenceVarAssignment* >(object);
  (void)_this;
}
void SequenceVarAssignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SequenceVarAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SequenceVarAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.SequenceVarAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forward_sequence_.Clear();
  backward_sequence_.Clear();
  unperformed_.Clear();
  var_id_.ClearToEmpty();
  active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SequenceVarAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.SequenceVarAssignment.var_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 forward_sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_forward_sequence(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_forward_sequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 backward_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_backward_sequence(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_backward_sequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 unperformed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unperformed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_unperformed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SequenceVarAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.SequenceVarAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var_id = 1;
  if (!this->_internal_var_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_id().data(), static_cast<int>(this->_internal_var_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.SequenceVarAssignment.var_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var_id(), target);
  }

  // repeated int32 forward_sequence = 2;
  {
    int byte_size = _forward_sequence_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_forward_sequence(), byte_size, target);
    }
  }

  // repeated int32 backward_sequence = 3;
  {
    int byte_size = _backward_sequence_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_backward_sequence(), byte_size, target);
    }
  }

  // repeated int32 unperformed = 4;
  {
    int byte_size = _unperformed_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_unperformed(), byte_size, target);
    }
  }

  // bool active = 5;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.SequenceVarAssignment)
  return target;
}

size_t SequenceVarAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.SequenceVarAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 forward_sequence = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->forward_sequence_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _forward_sequence_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 backward_sequence = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->backward_sequence_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _backward_sequence_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 unperformed = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->unperformed_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _unperformed_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string var_id = 1;
  if (!this->_internal_var_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_id());
  }

  // bool active = 5;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SequenceVarAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SequenceVarAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SequenceVarAssignment::GetClassData() const { return &_class_data_; }

void SequenceVarAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SequenceVarAssignment *>(to)->MergeFrom(
      static_cast<const SequenceVarAssignment &>(from));
}


void SequenceVarAssignment::MergeFrom(const SequenceVarAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.SequenceVarAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  forward_sequence_.MergeFrom(from.forward_sequence_);
  backward_sequence_.MergeFrom(from.backward_sequence_);
  unperformed_.MergeFrom(from.unperformed_);
  if (!from._internal_var_id().empty()) {
    _internal_set_var_id(from._internal_var_id());
  }
  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SequenceVarAssignment::CopyFrom(const SequenceVarAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.SequenceVarAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceVarAssignment::IsInitialized() const {
  return true;
}

void SequenceVarAssignment::InternalSwap(SequenceVarAssignment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  forward_sequence_.InternalSwap(&other->forward_sequence_);
  backward_sequence_.InternalSwap(&other->backward_sequence_);
  unperformed_.InternalSwap(&other->unperformed_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &var_id_, lhs_arena,
      &other->var_id_, rhs_arena
  );
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SequenceVarAssignment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2fassignment_2eproto[2]);
}

// ===================================================================

class WorkerInfo::_Internal {
 public:
};

WorkerInfo::WorkerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.WorkerInfo)
}
WorkerInfo::WorkerInfo(const WorkerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bns().empty()) {
    bns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bns(), 
      GetArenaForAllocation());
  }
  worker_id_ = from.worker_id_;
  // @@protoc_insertion_point(copy_constructor:operations_research.WorkerInfo)
}

inline void WorkerInfo::SharedCtor() {
bns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
worker_id_ = 0;
}

WorkerInfo::~WorkerInfo() {
  // @@protoc_insertion_point(destructor:operations_research.WorkerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bns_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkerInfo::ArenaDtor(void* object) {
  WorkerInfo* _this = reinterpret_cast< WorkerInfo* >(object);
  (void)_this;
}
void WorkerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.WorkerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bns_.ClearToEmpty();
  worker_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 worker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          worker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bns();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.WorkerInfo.bns"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.WorkerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 worker_id = 1;
  if (this->_internal_worker_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_worker_id(), target);
  }

  // string bns = 2;
  if (!this->_internal_bns().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bns().data(), static_cast<int>(this->_internal_bns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.WorkerInfo.bns");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.WorkerInfo)
  return target;
}

size_t WorkerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.WorkerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bns = 2;
  if (!this->_internal_bns().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bns());
  }

  // int32 worker_id = 1;
  if (this->_internal_worker_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_worker_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerInfo::GetClassData() const { return &_class_data_; }

void WorkerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkerInfo *>(to)->MergeFrom(
      static_cast<const WorkerInfo &>(from));
}


void WorkerInfo::MergeFrom(const WorkerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.WorkerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bns().empty()) {
    _internal_set_bns(from._internal_bns());
  }
  if (from._internal_worker_id() != 0) {
    _internal_set_worker_id(from._internal_worker_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerInfo::CopyFrom(const WorkerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.WorkerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerInfo::IsInitialized() const {
  return true;
}

void WorkerInfo::InternalSwap(WorkerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bns_, lhs_arena,
      &other->bns_, rhs_arena
  );
  swap(worker_id_, other->worker_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2fassignment_2eproto[3]);
}

// ===================================================================

class AssignmentProto::_Internal {
 public:
  static const ::operations_research::IntVarAssignment& objective(const AssignmentProto* msg);
  static const ::operations_research::WorkerInfo& worker_info(const AssignmentProto* msg);
};

const ::operations_research::IntVarAssignment&
AssignmentProto::_Internal::objective(const AssignmentProto* msg) {
  return *msg->objective_;
}
const ::operations_research::WorkerInfo&
AssignmentProto::_Internal::worker_info(const AssignmentProto* msg) {
  return *msg->worker_info_;
}
AssignmentProto::AssignmentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  int_var_assignment_(arena),
  interval_var_assignment_(arena),
  sequence_var_assignment_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.AssignmentProto)
}
AssignmentProto::AssignmentProto(const AssignmentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      int_var_assignment_(from.int_var_assignment_),
      interval_var_assignment_(from.interval_var_assignment_),
      sequence_var_assignment_(from.sequence_var_assignment_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_objective()) {
    objective_ = new ::operations_research::IntVarAssignment(*from.objective_);
  } else {
    objective_ = nullptr;
  }
  if (from._internal_has_worker_info()) {
    worker_info_ = new ::operations_research::WorkerInfo(*from.worker_info_);
  } else {
    worker_info_ = nullptr;
  }
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:operations_research.AssignmentProto)
}

inline void AssignmentProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objective_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_valid_) -
    reinterpret_cast<char*>(&objective_)) + sizeof(is_valid_));
}

AssignmentProto::~AssignmentProto() {
  // @@protoc_insertion_point(destructor:operations_research.AssignmentProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssignmentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete objective_;
  if (this != internal_default_instance()) delete worker_info_;
}

void AssignmentProto::ArenaDtor(void* object) {
  AssignmentProto* _this = reinterpret_cast< AssignmentProto* >(object);
  (void)_this;
}
void AssignmentProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssignmentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssignmentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.AssignmentProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int_var_assignment_.Clear();
  interval_var_assignment_.Clear();
  sequence_var_assignment_.Clear();
  if (GetArenaForAllocation() == nullptr && objective_ != nullptr) {
    delete objective_;
  }
  objective_ = nullptr;
  if (GetArenaForAllocation() == nullptr && worker_info_ != nullptr) {
    delete worker_info_;
  }
  worker_info_ = nullptr;
  is_valid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignmentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.IntVarAssignment int_var_assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_int_var_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.IntervalVarAssignment interval_var_assignment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interval_var_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.IntVarAssignment objective = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_objective(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .operations_research.WorkerInfo worker_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_worker_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.SequenceVarAssignment sequence_var_assignment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sequence_var_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignmentProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.AssignmentProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.IntVarAssignment int_var_assignment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_int_var_assignment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_int_var_assignment(i), target, stream);
  }

  // repeated .operations_research.IntervalVarAssignment interval_var_assignment = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interval_var_assignment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_interval_var_assignment(i), target, stream);
  }

  // .operations_research.IntVarAssignment objective = 3;
  if (this->_internal_has_objective()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::objective(this), target, stream);
  }

  // .operations_research.WorkerInfo worker_info = 4;
  if (this->_internal_has_worker_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::worker_info(this), target, stream);
  }

  // bool is_valid = 5;
  if (this->_internal_is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_valid(), target);
  }

  // repeated .operations_research.SequenceVarAssignment sequence_var_assignment = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sequence_var_assignment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_sequence_var_assignment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.AssignmentProto)
  return target;
}

size_t AssignmentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.AssignmentProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.IntVarAssignment int_var_assignment = 1;
  total_size += 1UL * this->_internal_int_var_assignment_size();
  for (const auto& msg : this->int_var_assignment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.IntervalVarAssignment interval_var_assignment = 2;
  total_size += 1UL * this->_internal_interval_var_assignment_size();
  for (const auto& msg : this->interval_var_assignment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.SequenceVarAssignment sequence_var_assignment = 6;
  total_size += 1UL * this->_internal_sequence_var_assignment_size();
  for (const auto& msg : this->sequence_var_assignment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .operations_research.IntVarAssignment objective = 3;
  if (this->_internal_has_objective()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objective_);
  }

  // .operations_research.WorkerInfo worker_info = 4;
  if (this->_internal_has_worker_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worker_info_);
  }

  // bool is_valid = 5;
  if (this->_internal_is_valid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignmentProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssignmentProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignmentProto::GetClassData() const { return &_class_data_; }

void AssignmentProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssignmentProto *>(to)->MergeFrom(
      static_cast<const AssignmentProto &>(from));
}


void AssignmentProto::MergeFrom(const AssignmentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.AssignmentProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  int_var_assignment_.MergeFrom(from.int_var_assignment_);
  interval_var_assignment_.MergeFrom(from.interval_var_assignment_);
  sequence_var_assignment_.MergeFrom(from.sequence_var_assignment_);
  if (from._internal_has_objective()) {
    _internal_mutable_objective()->::operations_research::IntVarAssignment::MergeFrom(from._internal_objective());
  }
  if (from._internal_has_worker_info()) {
    _internal_mutable_worker_info()->::operations_research::WorkerInfo::MergeFrom(from._internal_worker_info());
  }
  if (from._internal_is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignmentProto::CopyFrom(const AssignmentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.AssignmentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignmentProto::IsInitialized() const {
  return true;
}

void AssignmentProto::InternalSwap(AssignmentProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  int_var_assignment_.InternalSwap(&other->int_var_assignment_);
  interval_var_assignment_.InternalSwap(&other->interval_var_assignment_);
  sequence_var_assignment_.InternalSwap(&other->sequence_var_assignment_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssignmentProto, is_valid_)
      + sizeof(AssignmentProto::is_valid_)
      - PROTOBUF_FIELD_OFFSET(AssignmentProto, objective_)>(
          reinterpret_cast<char*>(&objective_),
          reinterpret_cast<char*>(&other->objective_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignmentProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_getter, &descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto_once,
      file_level_metadata_ortools_2fconstraint_5fsolver_2fassignment_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::IntVarAssignment* Arena::CreateMaybeMessage< ::operations_research::IntVarAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::IntVarAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::IntervalVarAssignment* Arena::CreateMaybeMessage< ::operations_research::IntervalVarAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::IntervalVarAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::SequenceVarAssignment* Arena::CreateMaybeMessage< ::operations_research::SequenceVarAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::SequenceVarAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::WorkerInfo* Arena::CreateMaybeMessage< ::operations_research::WorkerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::WorkerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::AssignmentProto* Arena::CreateMaybeMessage< ::operations_research::AssignmentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::AssignmentProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
