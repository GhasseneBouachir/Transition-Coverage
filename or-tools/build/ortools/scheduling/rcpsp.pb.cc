// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/scheduling/rcpsp.proto

#include "ortools/scheduling/rcpsp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace operations_research {
namespace scheduling {
namespace rcpsp {
constexpr Resource::Resource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_capacity_(0)
  , min_capacity_(0)
  , renewable_(false)
  , unit_cost_(0){}
struct ResourceDefaultTypeInternal {
  constexpr ResourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceDefaultTypeInternal() {}
  union {
    Resource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceDefaultTypeInternal _Resource_default_instance_;
constexpr Recipe::Recipe(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : demands_()
  , _demands_cached_byte_size_(0)
  , resources_()
  , _resources_cached_byte_size_(0)
  , duration_(0){}
struct RecipeDefaultTypeInternal {
  constexpr RecipeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecipeDefaultTypeInternal() {}
  union {
    Recipe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecipeDefaultTypeInternal _Recipe_default_instance_;
constexpr PerRecipeDelays::PerRecipeDelays(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_delays_()
  , _min_delays_cached_byte_size_(0){}
struct PerRecipeDelaysDefaultTypeInternal {
  constexpr PerRecipeDelaysDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PerRecipeDelaysDefaultTypeInternal() {}
  union {
    PerRecipeDelays _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PerRecipeDelaysDefaultTypeInternal _PerRecipeDelays_default_instance_;
constexpr PerSuccessorDelays::PerSuccessorDelays(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recipe_delays_(){}
struct PerSuccessorDelaysDefaultTypeInternal {
  constexpr PerSuccessorDelaysDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PerSuccessorDelaysDefaultTypeInternal() {}
  union {
    PerSuccessorDelays _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PerSuccessorDelaysDefaultTypeInternal _PerSuccessorDelays_default_instance_;
constexpr Task::Task(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : successors_()
  , _successors_cached_byte_size_(0)
  , recipes_()
  , successor_delays_(){}
struct TaskDefaultTypeInternal {
  constexpr TaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskDefaultTypeInternal _Task_default_instance_;
constexpr RcpspProblem::RcpspProblem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resources_()
  , tasks_()
  , basedata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_consumer_producer_(false)
  , is_resource_investment_(false)
  , is_rcpsp_max_(false)
  , deadline_(0)
  , horizon_(0)
  , release_date_(0)
  , tardiness_cost_(0)
  , mpm_time_(0)
  , seed_(int64_t{0})
  , due_date_(0){}
struct RcpspProblemDefaultTypeInternal {
  constexpr RcpspProblemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RcpspProblemDefaultTypeInternal() {}
  union {
    RcpspProblem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RcpspProblemDefaultTypeInternal _RcpspProblem_default_instance_;
}  // namespace rcpsp
}  // namespace scheduling
}  // namespace operations_research
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fscheduling_2frcpsp_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ortools_2fscheduling_2frcpsp_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fscheduling_2frcpsp_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fscheduling_2frcpsp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Resource, max_capacity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Resource, min_capacity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Resource, renewable_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Resource, unit_cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Recipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Recipe, duration_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Recipe, demands_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Recipe, resources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::PerRecipeDelays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::PerRecipeDelays, min_delays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::PerSuccessorDelays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::PerSuccessorDelays, recipe_delays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Task, successors_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Task, recipes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::Task, successor_delays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, resources_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, tasks_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, is_consumer_producer_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, is_resource_investment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, is_rcpsp_max_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, deadline_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, horizon_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, release_date_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, tardiness_cost_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, mpm_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, seed_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, basedata_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, due_date_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::rcpsp::RcpspProblem, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::scheduling::rcpsp::Resource)},
  { 10, -1, -1, sizeof(::operations_research::scheduling::rcpsp::Recipe)},
  { 19, -1, -1, sizeof(::operations_research::scheduling::rcpsp::PerRecipeDelays)},
  { 26, -1, -1, sizeof(::operations_research::scheduling::rcpsp::PerSuccessorDelays)},
  { 33, -1, -1, sizeof(::operations_research::scheduling::rcpsp::Task)},
  { 42, -1, -1, sizeof(::operations_research::scheduling::rcpsp::RcpspProblem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::rcpsp::_Resource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::rcpsp::_Recipe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::rcpsp::_PerRecipeDelays_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::rcpsp::_PerSuccessorDelays_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::rcpsp::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::rcpsp::_RcpspProblem_default_instance_),
};

const char descriptor_table_protodef_ortools_2fscheduling_2frcpsp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036ortools/scheduling/rcpsp.proto\022$operat"
  "ions_research.scheduling.rcpsp\"\\\n\010Resour"
  "ce\022\024\n\014max_capacity\030\001 \001(\005\022\024\n\014min_capacity"
  "\030\002 \001(\005\022\021\n\trenewable\030\003 \001(\010\022\021\n\tunit_cost\030\004"
  " \001(\005\">\n\006Recipe\022\020\n\010duration\030\001 \001(\005\022\017\n\007dema"
  "nds\030\002 \003(\005\022\021\n\tresources\030\003 \003(\005\"%\n\017PerRecip"
  "eDelays\022\022\n\nmin_delays\030\001 \003(\005\"b\n\022PerSucces"
  "sorDelays\022L\n\rrecipe_delays\030\001 \003(\01325.opera"
  "tions_research.scheduling.rcpsp.PerRecip"
  "eDelays\"\255\001\n\004Task\022\022\n\nsuccessors\030\001 \003(\005\022=\n\007"
  "recipes\030\002 \003(\0132,.operations_research.sche"
  "duling.rcpsp.Recipe\022R\n\020successor_delays\030"
  "\003 \003(\01328.operations_research.scheduling.r"
  "cpsp.PerSuccessorDelays\"\203\003\n\014RcpspProblem"
  "\022A\n\tresources\030\001 \003(\0132..operations_researc"
  "h.scheduling.rcpsp.Resource\0229\n\005tasks\030\002 \003"
  "(\0132*.operations_research.scheduling.rcps"
  "p.Task\022\034\n\024is_consumer_producer\030\003 \001(\010\022\036\n\026"
  "is_resource_investment\030\004 \001(\010\022\024\n\014is_rcpsp"
  "_max\030\005 \001(\010\022\020\n\010deadline\030\006 \001(\005\022\017\n\007horizon\030"
  "\007 \001(\005\022\024\n\014release_date\030\010 \001(\005\022\026\n\016tardiness"
  "_cost\030\t \001(\005\022\020\n\010mpm_time\030\n \001(\005\022\014\n\004seed\030\013 "
  "\001(\003\022\020\n\010basedata\030\014 \001(\t\022\020\n\010due_date\030\r \001(\005\022"
  "\014\n\004name\030\016 \001(\tBI\n#com.google.ortools.sche"
  "duling.rcpspP\001\252\002\037Google.OrTools.Scheduli"
  "ng.Rcpspb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fscheduling_2frcpsp_2eproto = {
  false, false, 1016, descriptor_table_protodef_ortools_2fscheduling_2frcpsp_2eproto, "ortools/scheduling/rcpsp.proto", 
  &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_ortools_2fscheduling_2frcpsp_2eproto::offsets,
  file_level_metadata_ortools_2fscheduling_2frcpsp_2eproto, file_level_enum_descriptors_ortools_2fscheduling_2frcpsp_2eproto, file_level_service_descriptors_ortools_2fscheduling_2frcpsp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_getter() {
  return &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ortools_2fscheduling_2frcpsp_2eproto(&descriptor_table_ortools_2fscheduling_2frcpsp_2eproto);
namespace operations_research {
namespace scheduling {
namespace rcpsp {

// ===================================================================

class Resource::_Internal {
 public:
};

Resource::Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.rcpsp.Resource)
}
Resource::Resource(const Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_capacity_, &from.max_capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_cost_) -
    reinterpret_cast<char*>(&max_capacity_)) + sizeof(unit_cost_));
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.rcpsp.Resource)
}

inline void Resource::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_capacity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_cost_) -
    reinterpret_cast<char*>(&max_capacity_)) + sizeof(unit_cost_));
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.rcpsp.Resource)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Resource::ArenaDtor(void* object) {
  Resource* _this = reinterpret_cast< Resource* >(object);
  (void)_this;
}
void Resource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.rcpsp.Resource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_cost_) -
      reinterpret_cast<char*>(&max_capacity_)) + sizeof(unit_cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Resource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          max_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          min_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool renewable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          renewable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unit_cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          unit_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Resource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.rcpsp.Resource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_capacity = 1;
  if (this->_internal_max_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_capacity(), target);
  }

  // int32 min_capacity = 2;
  if (this->_internal_min_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_capacity(), target);
  }

  // bool renewable = 3;
  if (this->_internal_renewable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_renewable(), target);
  }

  // int32 unit_cost = 4;
  if (this->_internal_unit_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_unit_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.rcpsp.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.rcpsp.Resource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_capacity = 1;
  if (this->_internal_max_capacity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_capacity());
  }

  // int32 min_capacity = 2;
  if (this->_internal_min_capacity() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_min_capacity());
  }

  // bool renewable = 3;
  if (this->_internal_renewable() != 0) {
    total_size += 1 + 1;
  }

  // int32 unit_cost = 4;
  if (this->_internal_unit_cost() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_unit_cost());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Resource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Resource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Resource::GetClassData() const { return &_class_data_; }

void Resource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Resource *>(to)->MergeFrom(
      static_cast<const Resource &>(from));
}


void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.rcpsp.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_capacity() != 0) {
    _internal_set_max_capacity(from._internal_max_capacity());
  }
  if (from._internal_min_capacity() != 0) {
    _internal_set_min_capacity(from._internal_min_capacity());
  }
  if (from._internal_renewable() != 0) {
    _internal_set_renewable(from._internal_renewable());
  }
  if (from._internal_unit_cost() != 0) {
    _internal_set_unit_cost(from._internal_unit_cost());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.rcpsp.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::InternalSwap(Resource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Resource, unit_cost_)
      + sizeof(Resource::unit_cost_)
      - PROTOBUF_FIELD_OFFSET(Resource, max_capacity_)>(
          reinterpret_cast<char*>(&max_capacity_),
          reinterpret_cast<char*>(&other->max_capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Resource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_getter, &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2frcpsp_2eproto[0]);
}

// ===================================================================

class Recipe::_Internal {
 public:
};

Recipe::Recipe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  demands_(arena),
  resources_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.rcpsp.Recipe)
}
Recipe::Recipe(const Recipe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      demands_(from.demands_),
      resources_(from.resources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.rcpsp.Recipe)
}

inline void Recipe::SharedCtor() {
duration_ = 0;
}

Recipe::~Recipe() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.rcpsp.Recipe)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Recipe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Recipe::ArenaDtor(void* object) {
  Recipe* _this = reinterpret_cast< Recipe* >(object);
  (void)_this;
}
void Recipe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Recipe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Recipe::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.rcpsp.Recipe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  demands_.Clear();
  resources_.Clear();
  duration_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Recipe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 demands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_demands(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_demands(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 resources = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_resources(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_resources(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Recipe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.rcpsp.Recipe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 duration = 1;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_duration(), target);
  }

  // repeated int32 demands = 2;
  {
    int byte_size = _demands_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_demands(), byte_size, target);
    }
  }

  // repeated int32 resources = 3;
  {
    int byte_size = _resources_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_resources(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.rcpsp.Recipe)
  return target;
}

size_t Recipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.rcpsp.Recipe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 demands = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->demands_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _demands_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 resources = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->resources_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _resources_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 duration = 1;
  if (this->_internal_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Recipe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Recipe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Recipe::GetClassData() const { return &_class_data_; }

void Recipe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Recipe *>(to)->MergeFrom(
      static_cast<const Recipe &>(from));
}


void Recipe::MergeFrom(const Recipe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.rcpsp.Recipe)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  demands_.MergeFrom(from.demands_);
  resources_.MergeFrom(from.resources_);
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Recipe::CopyFrom(const Recipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.rcpsp.Recipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recipe::IsInitialized() const {
  return true;
}

void Recipe::InternalSwap(Recipe* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  demands_.InternalSwap(&other->demands_);
  resources_.InternalSwap(&other->resources_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Recipe::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_getter, &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2frcpsp_2eproto[1]);
}

// ===================================================================

class PerRecipeDelays::_Internal {
 public:
};

PerRecipeDelays::PerRecipeDelays(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  min_delays_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.rcpsp.PerRecipeDelays)
}
PerRecipeDelays::PerRecipeDelays(const PerRecipeDelays& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      min_delays_(from.min_delays_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.rcpsp.PerRecipeDelays)
}

inline void PerRecipeDelays::SharedCtor() {
}

PerRecipeDelays::~PerRecipeDelays() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.rcpsp.PerRecipeDelays)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PerRecipeDelays::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerRecipeDelays::ArenaDtor(void* object) {
  PerRecipeDelays* _this = reinterpret_cast< PerRecipeDelays* >(object);
  (void)_this;
}
void PerRecipeDelays::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerRecipeDelays::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerRecipeDelays::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.rcpsp.PerRecipeDelays)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_delays_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerRecipeDelays::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 min_delays = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_min_delays(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_min_delays(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerRecipeDelays::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.rcpsp.PerRecipeDelays)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 min_delays = 1;
  {
    int byte_size = _min_delays_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_min_delays(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.rcpsp.PerRecipeDelays)
  return target;
}

size_t PerRecipeDelays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.rcpsp.PerRecipeDelays)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 min_delays = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->min_delays_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _min_delays_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerRecipeDelays::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerRecipeDelays::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerRecipeDelays::GetClassData() const { return &_class_data_; }

void PerRecipeDelays::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerRecipeDelays *>(to)->MergeFrom(
      static_cast<const PerRecipeDelays &>(from));
}


void PerRecipeDelays::MergeFrom(const PerRecipeDelays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.rcpsp.PerRecipeDelays)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  min_delays_.MergeFrom(from.min_delays_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerRecipeDelays::CopyFrom(const PerRecipeDelays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.rcpsp.PerRecipeDelays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerRecipeDelays::IsInitialized() const {
  return true;
}

void PerRecipeDelays::InternalSwap(PerRecipeDelays* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  min_delays_.InternalSwap(&other->min_delays_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerRecipeDelays::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_getter, &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2frcpsp_2eproto[2]);
}

// ===================================================================

class PerSuccessorDelays::_Internal {
 public:
};

PerSuccessorDelays::PerSuccessorDelays(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  recipe_delays_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.rcpsp.PerSuccessorDelays)
}
PerSuccessorDelays::PerSuccessorDelays(const PerSuccessorDelays& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      recipe_delays_(from.recipe_delays_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.rcpsp.PerSuccessorDelays)
}

inline void PerSuccessorDelays::SharedCtor() {
}

PerSuccessorDelays::~PerSuccessorDelays() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.rcpsp.PerSuccessorDelays)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PerSuccessorDelays::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerSuccessorDelays::ArenaDtor(void* object) {
  PerSuccessorDelays* _this = reinterpret_cast< PerSuccessorDelays* >(object);
  (void)_this;
}
void PerSuccessorDelays::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerSuccessorDelays::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerSuccessorDelays::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.rcpsp.PerSuccessorDelays)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipe_delays_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerSuccessorDelays::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.scheduling.rcpsp.PerRecipeDelays recipe_delays = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recipe_delays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerSuccessorDelays::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.rcpsp.PerSuccessorDelays)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.rcpsp.PerRecipeDelays recipe_delays = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recipe_delays_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_recipe_delays(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.rcpsp.PerSuccessorDelays)
  return target;
}

size_t PerSuccessorDelays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.rcpsp.PerSuccessorDelays)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.rcpsp.PerRecipeDelays recipe_delays = 1;
  total_size += 1UL * this->_internal_recipe_delays_size();
  for (const auto& msg : this->recipe_delays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerSuccessorDelays::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerSuccessorDelays::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerSuccessorDelays::GetClassData() const { return &_class_data_; }

void PerSuccessorDelays::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerSuccessorDelays *>(to)->MergeFrom(
      static_cast<const PerSuccessorDelays &>(from));
}


void PerSuccessorDelays::MergeFrom(const PerSuccessorDelays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.rcpsp.PerSuccessorDelays)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  recipe_delays_.MergeFrom(from.recipe_delays_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerSuccessorDelays::CopyFrom(const PerSuccessorDelays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.rcpsp.PerSuccessorDelays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerSuccessorDelays::IsInitialized() const {
  return true;
}

void PerSuccessorDelays::InternalSwap(PerSuccessorDelays* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  recipe_delays_.InternalSwap(&other->recipe_delays_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerSuccessorDelays::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_getter, &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2frcpsp_2eproto[3]);
}

// ===================================================================

class Task::_Internal {
 public:
};

Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  successors_(arena),
  recipes_(arena),
  successor_delays_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.rcpsp.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      successors_(from.successors_),
      recipes_(from.recipes_),
      successor_delays_(from.successor_delays_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.rcpsp.Task)
}

inline void Task::SharedCtor() {
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.rcpsp.Task)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Task::ArenaDtor(void* object) {
  Task* _this = reinterpret_cast< Task* >(object);
  (void)_this;
}
void Task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.rcpsp.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successors_.Clear();
  recipes_.Clear();
  successor_delays_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 successors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_successors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_successors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.scheduling.rcpsp.Recipe recipes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recipes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.scheduling.rcpsp.PerSuccessorDelays successor_delays = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_successor_delays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.rcpsp.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 successors = 1;
  {
    int byte_size = _successors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_successors(), byte_size, target);
    }
  }

  // repeated .operations_research.scheduling.rcpsp.Recipe recipes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recipes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_recipes(i), target, stream);
  }

  // repeated .operations_research.scheduling.rcpsp.PerSuccessorDelays successor_delays = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_successor_delays_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_successor_delays(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.rcpsp.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.rcpsp.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 successors = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->successors_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _successors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .operations_research.scheduling.rcpsp.Recipe recipes = 2;
  total_size += 1UL * this->_internal_recipes_size();
  for (const auto& msg : this->recipes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.scheduling.rcpsp.PerSuccessorDelays successor_delays = 3;
  total_size += 1UL * this->_internal_successor_delays_size();
  for (const auto& msg : this->successor_delays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }

void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Task *>(to)->MergeFrom(
      static_cast<const Task &>(from));
}


void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.rcpsp.Task)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  successors_.MergeFrom(from.successors_);
  recipes_.MergeFrom(from.recipes_);
  successor_delays_.MergeFrom(from.successor_delays_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.rcpsp.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  successors_.InternalSwap(&other->successors_);
  recipes_.InternalSwap(&other->recipes_);
  successor_delays_.InternalSwap(&other->successor_delays_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_getter, &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2frcpsp_2eproto[4]);
}

// ===================================================================

class RcpspProblem::_Internal {
 public:
};

RcpspProblem::RcpspProblem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resources_(arena),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.rcpsp.RcpspProblem)
}
RcpspProblem::RcpspProblem(const RcpspProblem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resources_(from.resources_),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  basedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    basedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_basedata().empty()) {
    basedata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_basedata(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&is_consumer_producer_, &from.is_consumer_producer_,
    static_cast<size_t>(reinterpret_cast<char*>(&due_date_) -
    reinterpret_cast<char*>(&is_consumer_producer_)) + sizeof(due_date_));
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.rcpsp.RcpspProblem)
}

inline void RcpspProblem::SharedCtor() {
basedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  basedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_consumer_producer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&due_date_) -
    reinterpret_cast<char*>(&is_consumer_producer_)) + sizeof(due_date_));
}

RcpspProblem::~RcpspProblem() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.rcpsp.RcpspProblem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RcpspProblem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  basedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RcpspProblem::ArenaDtor(void* object) {
  RcpspProblem* _this = reinterpret_cast< RcpspProblem* >(object);
  (void)_this;
}
void RcpspProblem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RcpspProblem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RcpspProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.rcpsp.RcpspProblem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_.Clear();
  tasks_.Clear();
  basedata_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&is_consumer_producer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&due_date_) -
      reinterpret_cast<char*>(&is_consumer_producer_)) + sizeof(due_date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RcpspProblem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.scheduling.rcpsp.Resource resources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.scheduling.rcpsp.Task tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_consumer_producer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_consumer_producer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_resource_investment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          is_resource_investment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_rcpsp_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          is_rcpsp_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 deadline = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 horizon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 release_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          release_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tardiness_cost = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          tardiness_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mpm_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          mpm_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string basedata = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_basedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.scheduling.rcpsp.RcpspProblem.basedata"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 due_date = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          due_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.scheduling.rcpsp.RcpspProblem.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RcpspProblem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.rcpsp.RcpspProblem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.rcpsp.Resource resources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resources(i), target, stream);
  }

  // repeated .operations_research.scheduling.rcpsp.Task tasks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  // bool is_consumer_producer = 3;
  if (this->_internal_is_consumer_producer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_consumer_producer(), target);
  }

  // bool is_resource_investment = 4;
  if (this->_internal_is_resource_investment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_resource_investment(), target);
  }

  // bool is_rcpsp_max = 5;
  if (this->_internal_is_rcpsp_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_rcpsp_max(), target);
  }

  // int32 deadline = 6;
  if (this->_internal_deadline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_deadline(), target);
  }

  // int32 horizon = 7;
  if (this->_internal_horizon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_horizon(), target);
  }

  // int32 release_date = 8;
  if (this->_internal_release_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_release_date(), target);
  }

  // int32 tardiness_cost = 9;
  if (this->_internal_tardiness_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_tardiness_cost(), target);
  }

  // int32 mpm_time = 10;
  if (this->_internal_mpm_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_mpm_time(), target);
  }

  // int64 seed = 11;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_seed(), target);
  }

  // string basedata = 12;
  if (!this->_internal_basedata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basedata().data(), static_cast<int>(this->_internal_basedata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.scheduling.rcpsp.RcpspProblem.basedata");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_basedata(), target);
  }

  // int32 due_date = 13;
  if (this->_internal_due_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_due_date(), target);
  }

  // string name = 14;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.scheduling.rcpsp.RcpspProblem.name");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.rcpsp.RcpspProblem)
  return target;
}

size_t RcpspProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.rcpsp.RcpspProblem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.rcpsp.Resource resources = 1;
  total_size += 1UL * this->_internal_resources_size();
  for (const auto& msg : this->resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.scheduling.rcpsp.Task tasks = 2;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string basedata = 12;
  if (!this->_internal_basedata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basedata());
  }

  // string name = 14;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool is_consumer_producer = 3;
  if (this->_internal_is_consumer_producer() != 0) {
    total_size += 1 + 1;
  }

  // bool is_resource_investment = 4;
  if (this->_internal_is_resource_investment() != 0) {
    total_size += 1 + 1;
  }

  // bool is_rcpsp_max = 5;
  if (this->_internal_is_rcpsp_max() != 0) {
    total_size += 1 + 1;
  }

  // int32 deadline = 6;
  if (this->_internal_deadline() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_deadline());
  }

  // int32 horizon = 7;
  if (this->_internal_horizon() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_horizon());
  }

  // int32 release_date = 8;
  if (this->_internal_release_date() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_release_date());
  }

  // int32 tardiness_cost = 9;
  if (this->_internal_tardiness_cost() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tardiness_cost());
  }

  // int32 mpm_time = 10;
  if (this->_internal_mpm_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mpm_time());
  }

  // int64 seed = 11;
  if (this->_internal_seed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seed());
  }

  // int32 due_date = 13;
  if (this->_internal_due_date() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_due_date());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RcpspProblem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RcpspProblem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RcpspProblem::GetClassData() const { return &_class_data_; }

void RcpspProblem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RcpspProblem *>(to)->MergeFrom(
      static_cast<const RcpspProblem &>(from));
}


void RcpspProblem::MergeFrom(const RcpspProblem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.rcpsp.RcpspProblem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  resources_.MergeFrom(from.resources_);
  tasks_.MergeFrom(from.tasks_);
  if (!from._internal_basedata().empty()) {
    _internal_set_basedata(from._internal_basedata());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_is_consumer_producer() != 0) {
    _internal_set_is_consumer_producer(from._internal_is_consumer_producer());
  }
  if (from._internal_is_resource_investment() != 0) {
    _internal_set_is_resource_investment(from._internal_is_resource_investment());
  }
  if (from._internal_is_rcpsp_max() != 0) {
    _internal_set_is_rcpsp_max(from._internal_is_rcpsp_max());
  }
  if (from._internal_deadline() != 0) {
    _internal_set_deadline(from._internal_deadline());
  }
  if (from._internal_horizon() != 0) {
    _internal_set_horizon(from._internal_horizon());
  }
  if (from._internal_release_date() != 0) {
    _internal_set_release_date(from._internal_release_date());
  }
  if (from._internal_tardiness_cost() != 0) {
    _internal_set_tardiness_cost(from._internal_tardiness_cost());
  }
  if (from._internal_mpm_time() != 0) {
    _internal_set_mpm_time(from._internal_mpm_time());
  }
  if (from._internal_seed() != 0) {
    _internal_set_seed(from._internal_seed());
  }
  if (from._internal_due_date() != 0) {
    _internal_set_due_date(from._internal_due_date());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RcpspProblem::CopyFrom(const RcpspProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.rcpsp.RcpspProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcpspProblem::IsInitialized() const {
  return true;
}

void RcpspProblem::InternalSwap(RcpspProblem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resources_.InternalSwap(&other->resources_);
  tasks_.InternalSwap(&other->tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &basedata_, lhs_arena,
      &other->basedata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RcpspProblem, due_date_)
      + sizeof(RcpspProblem::due_date_)
      - PROTOBUF_FIELD_OFFSET(RcpspProblem, is_consumer_producer_)>(
          reinterpret_cast<char*>(&is_consumer_producer_),
          reinterpret_cast<char*>(&other->is_consumer_producer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RcpspProblem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_getter, &descriptor_table_ortools_2fscheduling_2frcpsp_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2frcpsp_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rcpsp
}  // namespace scheduling
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::rcpsp::Resource* Arena::CreateMaybeMessage< ::operations_research::scheduling::rcpsp::Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::rcpsp::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::rcpsp::Recipe* Arena::CreateMaybeMessage< ::operations_research::scheduling::rcpsp::Recipe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::rcpsp::Recipe >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::rcpsp::PerRecipeDelays* Arena::CreateMaybeMessage< ::operations_research::scheduling::rcpsp::PerRecipeDelays >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::rcpsp::PerRecipeDelays >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::rcpsp::PerSuccessorDelays* Arena::CreateMaybeMessage< ::operations_research::scheduling::rcpsp::PerSuccessorDelays >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::rcpsp::PerSuccessorDelays >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::rcpsp::Task* Arena::CreateMaybeMessage< ::operations_research::scheduling::rcpsp::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::rcpsp::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::rcpsp::RcpspProblem* Arena::CreateMaybeMessage< ::operations_research::scheduling::rcpsp::RcpspProblem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::rcpsp::RcpspProblem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
