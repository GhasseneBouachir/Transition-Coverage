// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/scheduling/jobshop_scheduling.proto

#include "ortools/scheduling/jobshop_scheduling.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace operations_research {
namespace scheduling {
namespace jssp {
constexpr Task::Task(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_()
  , _machine_cached_byte_size_(0)
  , duration_()
  , _duration_cached_byte_size_(0)
  , cost_()
  , _cost_cached_byte_size_(0){}
struct TaskDefaultTypeInternal {
  constexpr TaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskDefaultTypeInternal _Task_default_instance_;
constexpr Job::Job(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , earliest_start_(nullptr)
  , latest_end_(nullptr)
  , early_due_date_(int64_t{0})
  , late_due_date_(int64_t{0})
  , earliness_cost_per_time_unit_(int64_t{0})
  , lateness_cost_per_time_unit_(int64_t{0}){}
struct JobDefaultTypeInternal {
  constexpr JobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JobDefaultTypeInternal() {}
  union {
    Job _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JobDefaultTypeInternal _Job_default_instance_;
constexpr TransitionTimeMatrix::TransitionTimeMatrix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transition_time_()
  , _transition_time_cached_byte_size_(0){}
struct TransitionTimeMatrixDefaultTypeInternal {
  constexpr TransitionTimeMatrixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransitionTimeMatrixDefaultTypeInternal() {}
  union {
    TransitionTimeMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransitionTimeMatrixDefaultTypeInternal _TransitionTimeMatrix_default_instance_;
constexpr Machine::Machine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transition_time_matrix_(nullptr){}
struct MachineDefaultTypeInternal {
  constexpr MachineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MachineDefaultTypeInternal() {}
  union {
    Machine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MachineDefaultTypeInternal _Machine_default_instance_;
constexpr JobPrecedence::JobPrecedence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : first_job_index_(0)
  , second_job_index_(0)
  , min_delay_(int64_t{0}){}
struct JobPrecedenceDefaultTypeInternal {
  constexpr JobPrecedenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JobPrecedenceDefaultTypeInternal() {}
  union {
    JobPrecedence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JobPrecedenceDefaultTypeInternal _JobPrecedence_default_instance_;
constexpr JsspInputProblem::JsspInputProblem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : jobs_()
  , machines_()
  , precedences_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scaling_factor_(nullptr)
  , makespan_cost_per_time_unit_(int64_t{0})
  , seed_(0){}
struct JsspInputProblemDefaultTypeInternal {
  constexpr JsspInputProblemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JsspInputProblemDefaultTypeInternal() {}
  union {
    JsspInputProblem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JsspInputProblemDefaultTypeInternal _JsspInputProblem_default_instance_;
constexpr AssignedTask::AssignedTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_time_(int64_t{0})
  , alternative_index_(0){}
struct AssignedTaskDefaultTypeInternal {
  constexpr AssignedTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssignedTaskDefaultTypeInternal() {}
  union {
    AssignedTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssignedTaskDefaultTypeInternal _AssignedTask_default_instance_;
constexpr AssignedJob::AssignedJob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_()
  , due_date_cost_(int64_t{0})
  , sum_of_task_costs_(int64_t{0}){}
struct AssignedJobDefaultTypeInternal {
  constexpr AssignedJobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssignedJobDefaultTypeInternal() {}
  union {
    AssignedJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssignedJobDefaultTypeInternal _AssignedJob_default_instance_;
constexpr JsspOutputSolution::JsspOutputSolution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : jobs_()
  , makespan_cost_(int64_t{0})
  , total_cost_(int64_t{0}){}
struct JsspOutputSolutionDefaultTypeInternal {
  constexpr JsspOutputSolutionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JsspOutputSolutionDefaultTypeInternal() {}
  union {
    JsspOutputSolution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JsspOutputSolutionDefaultTypeInternal _JsspOutputSolution_default_instance_;
}  // namespace jssp
}  // namespace scheduling
}  // namespace operations_research
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Task, machine_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Task, duration_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Task, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Job, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Job, tasks_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Job, earliest_start_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Job, early_due_date_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Job, late_due_date_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Job, earliness_cost_per_time_unit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Job, lateness_cost_per_time_unit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Job, latest_end_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Job, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::TransitionTimeMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::TransitionTimeMatrix, transition_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Machine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Machine, transition_time_matrix_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::Machine, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JobPrecedence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JobPrecedence, first_job_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JobPrecedence, second_job_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JobPrecedence, min_delay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspInputProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspInputProblem, jobs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspInputProblem, machines_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspInputProblem, precedences_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspInputProblem, makespan_cost_per_time_unit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspInputProblem, scaling_factor_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspInputProblem, seed_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspInputProblem, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::AssignedTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::AssignedTask, alternative_index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::AssignedTask, start_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::AssignedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::AssignedJob, tasks_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::AssignedJob, due_date_cost_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::AssignedJob, sum_of_task_costs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspOutputSolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspOutputSolution, jobs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspOutputSolution, makespan_cost_),
  PROTOBUF_FIELD_OFFSET(::operations_research::scheduling::jssp::JsspOutputSolution, total_cost_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::scheduling::jssp::Task)},
  { 9, -1, -1, sizeof(::operations_research::scheduling::jssp::Job)},
  { 23, -1, -1, sizeof(::operations_research::scheduling::jssp::TransitionTimeMatrix)},
  { 30, -1, -1, sizeof(::operations_research::scheduling::jssp::Machine)},
  { 38, -1, -1, sizeof(::operations_research::scheduling::jssp::JobPrecedence)},
  { 47, -1, -1, sizeof(::operations_research::scheduling::jssp::JsspInputProblem)},
  { 60, -1, -1, sizeof(::operations_research::scheduling::jssp::AssignedTask)},
  { 68, -1, -1, sizeof(::operations_research::scheduling::jssp::AssignedJob)},
  { 77, -1, -1, sizeof(::operations_research::scheduling::jssp::JsspOutputSolution)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::jssp::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::jssp::_Job_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::jssp::_TransitionTimeMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::jssp::_Machine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::jssp::_JobPrecedence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::jssp::_JsspInputProblem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::jssp::_AssignedTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::jssp::_AssignedJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::scheduling::jssp::_JsspOutputSolution_default_instance_),
};

const char descriptor_table_protodef_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+ortools/scheduling/jobshop_scheduling."
  "proto\022#operations_research.scheduling.js"
  "sp\032\036google/protobuf/wrappers.proto\"7\n\004Ta"
  "sk\022\017\n\007machine\030\001 \003(\005\022\020\n\010duration\030\002 \003(\003\022\014\n"
  "\004cost\030\003 \003(\003\"\255\002\n\003Job\0228\n\005tasks\030\001 \003(\0132).ope"
  "rations_research.scheduling.jssp.Task\0223\n"
  "\016earliest_start\030\002 \001(\0132\033.google.protobuf."
  "Int64Value\022\026\n\016early_due_date\030\003 \001(\003\022\025\n\rla"
  "te_due_date\030\004 \001(\003\022$\n\034earliness_cost_per_"
  "time_unit\030\005 \001(\003\022#\n\033lateness_cost_per_tim"
  "e_unit\030\006 \001(\003\022/\n\nlatest_end\030\007 \001(\0132\033.googl"
  "e.protobuf.Int64Value\022\014\n\004name\030\020 \001(\t\"/\n\024T"
  "ransitionTimeMatrix\022\027\n\017transition_time\030\001"
  " \003(\003\"r\n\007Machine\022Y\n\026transition_time_matri"
  "x\030\001 \001(\01329.operations_research.scheduling"
  ".jssp.TransitionTimeMatrix\022\014\n\004name\030\020 \001(\t"
  "\"U\n\rJobPrecedence\022\027\n\017first_job_index\030\001 \001"
  "(\005\022\030\n\020second_job_index\030\002 \001(\005\022\021\n\tmin_dela"
  "y\030\003 \001(\003\"\312\002\n\020JsspInputProblem\0226\n\004jobs\030\001 \003"
  "(\0132(.operations_research.scheduling.jssp"
  ".Job\022>\n\010machines\030\002 \003(\0132,.operations_rese"
  "arch.scheduling.jssp.Machine\022G\n\013preceden"
  "ces\030\003 \003(\01322.operations_research.scheduli"
  "ng.jssp.JobPrecedence\022#\n\033makespan_cost_p"
  "er_time_unit\030\004 \001(\003\0224\n\016scaling_factor\030\005 \001"
  "(\0132\034.google.protobuf.DoubleValue\022\014\n\004seed"
  "\030\030 \001(\005\022\014\n\004name\030\020 \001(\t\"=\n\014AssignedTask\022\031\n\021"
  "alternative_index\030\001 \001(\005\022\022\n\nstart_time\030\002 "
  "\001(\003\"\201\001\n\013AssignedJob\022@\n\005tasks\030\001 \003(\01321.ope"
  "rations_research.scheduling.jssp.Assigne"
  "dTask\022\025\n\rdue_date_cost\030\002 \001(\003\022\031\n\021sum_of_t"
  "ask_costs\030\003 \001(\003\"\177\n\022JsspOutputSolution\022>\n"
  "\004jobs\030\001 \003(\01320.operations_research.schedu"
  "ling.jssp.AssignedJob\022\025\n\rmakespan_cost\030\002"
  " \001(\003\022\022\n\ntotal_cost\030\003 \001(\003BG\n\"com.google.o"
  "rtools.scheduling.jsspP\001\252\002\036Google.OrTool"
  "s.scheduling.Jsspb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto = {
  false, false, 1465, descriptor_table_protodef_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto, "ortools/scheduling/jobshop_scheduling.proto", 
  &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once, descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto::offsets,
  file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto, file_level_enum_descriptors_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto, file_level_service_descriptors_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_getter() {
  return &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto(&descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto);
namespace operations_research {
namespace scheduling {
namespace jssp {

// ===================================================================

class Task::_Internal {
 public:
};

Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  machine_(arena),
  duration_(arena),
  cost_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.jssp.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      machine_(from.machine_),
      duration_(from.duration_),
      cost_(from.cost_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.jssp.Task)
}

inline void Task::SharedCtor() {
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.jssp.Task)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Task::ArenaDtor(void* object) {
  Task* _this = reinterpret_cast< Task* >(object);
  (void)_this;
}
void Task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.jssp.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_.Clear();
  duration_.Clear();
  cost_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 machine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_machine(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_machine(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_duration(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_duration(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_cost(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_cost(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.jssp.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 machine = 1;
  {
    int byte_size = _machine_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_machine(), byte_size, target);
    }
  }

  // repeated int64 duration = 2;
  {
    int byte_size = _duration_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_duration(), byte_size, target);
    }
  }

  // repeated int64 cost = 3;
  {
    int byte_size = _cost_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_cost(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.jssp.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.jssp.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 machine = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->machine_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _machine_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 duration = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->duration_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _duration_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 cost = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->cost_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cost_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }

void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Task *>(to)->MergeFrom(
      static_cast<const Task &>(from));
}


void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.jssp.Task)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  machine_.MergeFrom(from.machine_);
  duration_.MergeFrom(from.duration_);
  cost_.MergeFrom(from.cost_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.jssp.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  machine_.InternalSwap(&other->machine_);
  duration_.InternalSwap(&other->duration_);
  cost_.InternalSwap(&other->cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[0]);
}

// ===================================================================

class Job::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Int64Value& earliest_start(const Job* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int64Value& latest_end(const Job* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Int64Value&
Job::_Internal::earliest_start(const Job* msg) {
  return *msg->earliest_start_;
}
const ::PROTOBUF_NAMESPACE_ID::Int64Value&
Job::_Internal::latest_end(const Job* msg) {
  return *msg->latest_end_;
}
void Job::clear_earliest_start() {
  if (GetArenaForAllocation() == nullptr && earliest_start_ != nullptr) {
    delete earliest_start_;
  }
  earliest_start_ = nullptr;
}
void Job::clear_latest_end() {
  if (GetArenaForAllocation() == nullptr && latest_end_ != nullptr) {
    delete latest_end_;
  }
  latest_end_ = nullptr;
}
Job::Job(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.jssp.Job)
}
Job::Job(const Job& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_earliest_start()) {
    earliest_start_ = new ::PROTOBUF_NAMESPACE_ID::Int64Value(*from.earliest_start_);
  } else {
    earliest_start_ = nullptr;
  }
  if (from._internal_has_latest_end()) {
    latest_end_ = new ::PROTOBUF_NAMESPACE_ID::Int64Value(*from.latest_end_);
  } else {
    latest_end_ = nullptr;
  }
  ::memcpy(&early_due_date_, &from.early_due_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&lateness_cost_per_time_unit_) -
    reinterpret_cast<char*>(&early_due_date_)) + sizeof(lateness_cost_per_time_unit_));
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.jssp.Job)
}

inline void Job::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&earliest_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lateness_cost_per_time_unit_) -
    reinterpret_cast<char*>(&earliest_start_)) + sizeof(lateness_cost_per_time_unit_));
}

Job::~Job() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.jssp.Job)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Job::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete earliest_start_;
  if (this != internal_default_instance()) delete latest_end_;
}

void Job::ArenaDtor(void* object) {
  Job* _this = reinterpret_cast< Job* >(object);
  (void)_this;
}
void Job::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Job::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Job::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.jssp.Job)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && earliest_start_ != nullptr) {
    delete earliest_start_;
  }
  earliest_start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && latest_end_ != nullptr) {
    delete latest_end_;
  }
  latest_end_ = nullptr;
  ::memset(&early_due_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lateness_cost_per_time_unit_) -
      reinterpret_cast<char*>(&early_due_date_)) + sizeof(lateness_cost_per_time_unit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Job::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.scheduling.jssp.Task tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value earliest_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_earliest_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 early_due_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          early_due_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 late_due_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          late_due_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 earliness_cost_per_time_unit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          earliness_cost_per_time_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lateness_cost_per_time_unit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          lateness_cost_per_time_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value latest_end = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.scheduling.jssp.Job.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Job::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.jssp.Job)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.jssp.Task tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tasks(i), target, stream);
  }

  // .google.protobuf.Int64Value earliest_start = 2;
  if (this->_internal_has_earliest_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::earliest_start(this), target, stream);
  }

  // int64 early_due_date = 3;
  if (this->_internal_early_due_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_early_due_date(), target);
  }

  // int64 late_due_date = 4;
  if (this->_internal_late_due_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_late_due_date(), target);
  }

  // int64 earliness_cost_per_time_unit = 5;
  if (this->_internal_earliness_cost_per_time_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_earliness_cost_per_time_unit(), target);
  }

  // int64 lateness_cost_per_time_unit = 6;
  if (this->_internal_lateness_cost_per_time_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_lateness_cost_per_time_unit(), target);
  }

  // .google.protobuf.Int64Value latest_end = 7;
  if (this->_internal_has_latest_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::latest_end(this), target, stream);
  }

  // string name = 16;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.scheduling.jssp.Job.name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.jssp.Job)
  return target;
}

size_t Job::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.jssp.Job)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.jssp.Task tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 16;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Int64Value earliest_start = 2;
  if (this->_internal_has_earliest_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *earliest_start_);
  }

  // .google.protobuf.Int64Value latest_end = 7;
  if (this->_internal_has_latest_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latest_end_);
  }

  // int64 early_due_date = 3;
  if (this->_internal_early_due_date() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_early_due_date());
  }

  // int64 late_due_date = 4;
  if (this->_internal_late_due_date() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_late_due_date());
  }

  // int64 earliness_cost_per_time_unit = 5;
  if (this->_internal_earliness_cost_per_time_unit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_earliness_cost_per_time_unit());
  }

  // int64 lateness_cost_per_time_unit = 6;
  if (this->_internal_lateness_cost_per_time_unit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lateness_cost_per_time_unit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Job::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Job::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Job::GetClassData() const { return &_class_data_; }

void Job::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Job *>(to)->MergeFrom(
      static_cast<const Job &>(from));
}


void Job::MergeFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.jssp.Job)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_earliest_start()) {
    _internal_mutable_earliest_start()->::PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_earliest_start());
  }
  if (from._internal_has_latest_end()) {
    _internal_mutable_latest_end()->::PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_latest_end());
  }
  if (from._internal_early_due_date() != 0) {
    _internal_set_early_due_date(from._internal_early_due_date());
  }
  if (from._internal_late_due_date() != 0) {
    _internal_set_late_due_date(from._internal_late_due_date());
  }
  if (from._internal_earliness_cost_per_time_unit() != 0) {
    _internal_set_earliness_cost_per_time_unit(from._internal_earliness_cost_per_time_unit());
  }
  if (from._internal_lateness_cost_per_time_unit() != 0) {
    _internal_set_lateness_cost_per_time_unit(from._internal_lateness_cost_per_time_unit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Job::CopyFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.jssp.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job::IsInitialized() const {
  return true;
}

void Job::InternalSwap(Job* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Job, lateness_cost_per_time_unit_)
      + sizeof(Job::lateness_cost_per_time_unit_)
      - PROTOBUF_FIELD_OFFSET(Job, earliest_start_)>(
          reinterpret_cast<char*>(&earliest_start_),
          reinterpret_cast<char*>(&other->earliest_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Job::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[1]);
}

// ===================================================================

class TransitionTimeMatrix::_Internal {
 public:
};

TransitionTimeMatrix::TransitionTimeMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transition_time_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.jssp.TransitionTimeMatrix)
}
TransitionTimeMatrix::TransitionTimeMatrix(const TransitionTimeMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transition_time_(from.transition_time_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.jssp.TransitionTimeMatrix)
}

inline void TransitionTimeMatrix::SharedCtor() {
}

TransitionTimeMatrix::~TransitionTimeMatrix() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.jssp.TransitionTimeMatrix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransitionTimeMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransitionTimeMatrix::ArenaDtor(void* object) {
  TransitionTimeMatrix* _this = reinterpret_cast< TransitionTimeMatrix* >(object);
  (void)_this;
}
void TransitionTimeMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransitionTimeMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransitionTimeMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.jssp.TransitionTimeMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transition_time_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransitionTimeMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 transition_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_transition_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_transition_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransitionTimeMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.jssp.TransitionTimeMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 transition_time = 1;
  {
    int byte_size = _transition_time_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_transition_time(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.jssp.TransitionTimeMatrix)
  return target;
}

size_t TransitionTimeMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.jssp.TransitionTimeMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 transition_time = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->transition_time_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _transition_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransitionTimeMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransitionTimeMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransitionTimeMatrix::GetClassData() const { return &_class_data_; }

void TransitionTimeMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransitionTimeMatrix *>(to)->MergeFrom(
      static_cast<const TransitionTimeMatrix &>(from));
}


void TransitionTimeMatrix::MergeFrom(const TransitionTimeMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.jssp.TransitionTimeMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  transition_time_.MergeFrom(from.transition_time_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransitionTimeMatrix::CopyFrom(const TransitionTimeMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.jssp.TransitionTimeMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionTimeMatrix::IsInitialized() const {
  return true;
}

void TransitionTimeMatrix::InternalSwap(TransitionTimeMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transition_time_.InternalSwap(&other->transition_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransitionTimeMatrix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[2]);
}

// ===================================================================

class Machine::_Internal {
 public:
  static const ::operations_research::scheduling::jssp::TransitionTimeMatrix& transition_time_matrix(const Machine* msg);
};

const ::operations_research::scheduling::jssp::TransitionTimeMatrix&
Machine::_Internal::transition_time_matrix(const Machine* msg) {
  return *msg->transition_time_matrix_;
}
Machine::Machine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.jssp.Machine)
}
Machine::Machine(const Machine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transition_time_matrix()) {
    transition_time_matrix_ = new ::operations_research::scheduling::jssp::TransitionTimeMatrix(*from.transition_time_matrix_);
  } else {
    transition_time_matrix_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.jssp.Machine)
}

inline void Machine::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
transition_time_matrix_ = nullptr;
}

Machine::~Machine() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.jssp.Machine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Machine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transition_time_matrix_;
}

void Machine::ArenaDtor(void* object) {
  Machine* _this = reinterpret_cast< Machine* >(object);
  (void)_this;
}
void Machine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Machine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Machine::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.jssp.Machine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transition_time_matrix_ != nullptr) {
    delete transition_time_matrix_;
  }
  transition_time_matrix_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Machine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operations_research.scheduling.jssp.TransitionTimeMatrix transition_time_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition_time_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.scheduling.jssp.Machine.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Machine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.jssp.Machine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.scheduling.jssp.TransitionTimeMatrix transition_time_matrix = 1;
  if (this->_internal_has_transition_time_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transition_time_matrix(this), target, stream);
  }

  // string name = 16;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.scheduling.jssp.Machine.name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.jssp.Machine)
  return target;
}

size_t Machine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.jssp.Machine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 16;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .operations_research.scheduling.jssp.TransitionTimeMatrix transition_time_matrix = 1;
  if (this->_internal_has_transition_time_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transition_time_matrix_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Machine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Machine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Machine::GetClassData() const { return &_class_data_; }

void Machine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Machine *>(to)->MergeFrom(
      static_cast<const Machine &>(from));
}


void Machine::MergeFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.jssp.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_transition_time_matrix()) {
    _internal_mutable_transition_time_matrix()->::operations_research::scheduling::jssp::TransitionTimeMatrix::MergeFrom(from._internal_transition_time_matrix());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Machine::CopyFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.jssp.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine::IsInitialized() const {
  return true;
}

void Machine::InternalSwap(Machine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(transition_time_matrix_, other->transition_time_matrix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Machine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[3]);
}

// ===================================================================

class JobPrecedence::_Internal {
 public:
};

JobPrecedence::JobPrecedence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.jssp.JobPrecedence)
}
JobPrecedence::JobPrecedence(const JobPrecedence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&first_job_index_, &from.first_job_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_delay_) -
    reinterpret_cast<char*>(&first_job_index_)) + sizeof(min_delay_));
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.jssp.JobPrecedence)
}

inline void JobPrecedence::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_job_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_delay_) -
    reinterpret_cast<char*>(&first_job_index_)) + sizeof(min_delay_));
}

JobPrecedence::~JobPrecedence() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.jssp.JobPrecedence)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JobPrecedence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JobPrecedence::ArenaDtor(void* object) {
  JobPrecedence* _this = reinterpret_cast< JobPrecedence* >(object);
  (void)_this;
}
void JobPrecedence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JobPrecedence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JobPrecedence::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.jssp.JobPrecedence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&first_job_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_delay_) -
      reinterpret_cast<char*>(&first_job_index_)) + sizeof(min_delay_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobPrecedence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 first_job_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          first_job_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 second_job_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          second_job_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 min_delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          min_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JobPrecedence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.jssp.JobPrecedence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 first_job_index = 1;
  if (this->_internal_first_job_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_first_job_index(), target);
  }

  // int32 second_job_index = 2;
  if (this->_internal_second_job_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_second_job_index(), target);
  }

  // int64 min_delay = 3;
  if (this->_internal_min_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_min_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.jssp.JobPrecedence)
  return target;
}

size_t JobPrecedence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.jssp.JobPrecedence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 first_job_index = 1;
  if (this->_internal_first_job_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_first_job_index());
  }

  // int32 second_job_index = 2;
  if (this->_internal_second_job_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_second_job_index());
  }

  // int64 min_delay = 3;
  if (this->_internal_min_delay() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_min_delay());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobPrecedence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JobPrecedence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobPrecedence::GetClassData() const { return &_class_data_; }

void JobPrecedence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JobPrecedence *>(to)->MergeFrom(
      static_cast<const JobPrecedence &>(from));
}


void JobPrecedence::MergeFrom(const JobPrecedence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.jssp.JobPrecedence)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_first_job_index() != 0) {
    _internal_set_first_job_index(from._internal_first_job_index());
  }
  if (from._internal_second_job_index() != 0) {
    _internal_set_second_job_index(from._internal_second_job_index());
  }
  if (from._internal_min_delay() != 0) {
    _internal_set_min_delay(from._internal_min_delay());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobPrecedence::CopyFrom(const JobPrecedence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.jssp.JobPrecedence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobPrecedence::IsInitialized() const {
  return true;
}

void JobPrecedence::InternalSwap(JobPrecedence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JobPrecedence, min_delay_)
      + sizeof(JobPrecedence::min_delay_)
      - PROTOBUF_FIELD_OFFSET(JobPrecedence, first_job_index_)>(
          reinterpret_cast<char*>(&first_job_index_),
          reinterpret_cast<char*>(&other->first_job_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JobPrecedence::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[4]);
}

// ===================================================================

class JsspInputProblem::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& scaling_factor(const JsspInputProblem* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
JsspInputProblem::_Internal::scaling_factor(const JsspInputProblem* msg) {
  return *msg->scaling_factor_;
}
void JsspInputProblem::clear_scaling_factor() {
  if (GetArenaForAllocation() == nullptr && scaling_factor_ != nullptr) {
    delete scaling_factor_;
  }
  scaling_factor_ = nullptr;
}
JsspInputProblem::JsspInputProblem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  jobs_(arena),
  machines_(arena),
  precedences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.jssp.JsspInputProblem)
}
JsspInputProblem::JsspInputProblem(const JsspInputProblem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      jobs_(from.jobs_),
      machines_(from.machines_),
      precedences_(from.precedences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_scaling_factor()) {
    scaling_factor_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.scaling_factor_);
  } else {
    scaling_factor_ = nullptr;
  }
  ::memcpy(&makespan_cost_per_time_unit_, &from.makespan_cost_per_time_unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&seed_) -
    reinterpret_cast<char*>(&makespan_cost_per_time_unit_)) + sizeof(seed_));
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.jssp.JsspInputProblem)
}

inline void JsspInputProblem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scaling_factor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seed_) -
    reinterpret_cast<char*>(&scaling_factor_)) + sizeof(seed_));
}

JsspInputProblem::~JsspInputProblem() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.jssp.JsspInputProblem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JsspInputProblem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scaling_factor_;
}

void JsspInputProblem::ArenaDtor(void* object) {
  JsspInputProblem* _this = reinterpret_cast< JsspInputProblem* >(object);
  (void)_this;
}
void JsspInputProblem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JsspInputProblem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JsspInputProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.jssp.JsspInputProblem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jobs_.Clear();
  machines_.Clear();
  precedences_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && scaling_factor_ != nullptr) {
    delete scaling_factor_;
  }
  scaling_factor_ = nullptr;
  ::memset(&makespan_cost_per_time_unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seed_) -
      reinterpret_cast<char*>(&makespan_cost_per_time_unit_)) + sizeof(seed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JsspInputProblem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.scheduling.jssp.Job jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.scheduling.jssp.Machine machines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_machines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.scheduling.jssp.JobPrecedence precedences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_precedences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 makespan_cost_per_time_unit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          makespan_cost_per_time_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue scaling_factor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaling_factor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.scheduling.jssp.JsspInputProblem.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seed = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JsspInputProblem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.jssp.JsspInputProblem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.jssp.Job jobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_jobs(i), target, stream);
  }

  // repeated .operations_research.scheduling.jssp.Machine machines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_machines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_machines(i), target, stream);
  }

  // repeated .operations_research.scheduling.jssp.JobPrecedence precedences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_precedences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_precedences(i), target, stream);
  }

  // int64 makespan_cost_per_time_unit = 4;
  if (this->_internal_makespan_cost_per_time_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_makespan_cost_per_time_unit(), target);
  }

  // .google.protobuf.DoubleValue scaling_factor = 5;
  if (this->_internal_has_scaling_factor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::scaling_factor(this), target, stream);
  }

  // string name = 16;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.scheduling.jssp.JsspInputProblem.name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_name(), target);
  }

  // int32 seed = 24;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.jssp.JsspInputProblem)
  return target;
}

size_t JsspInputProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.jssp.JsspInputProblem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.jssp.Job jobs = 1;
  total_size += 1UL * this->_internal_jobs_size();
  for (const auto& msg : this->jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.scheduling.jssp.Machine machines = 2;
  total_size += 1UL * this->_internal_machines_size();
  for (const auto& msg : this->machines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.scheduling.jssp.JobPrecedence precedences = 3;
  total_size += 1UL * this->_internal_precedences_size();
  for (const auto& msg : this->precedences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 16;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.DoubleValue scaling_factor = 5;
  if (this->_internal_has_scaling_factor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaling_factor_);
  }

  // int64 makespan_cost_per_time_unit = 4;
  if (this->_internal_makespan_cost_per_time_unit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_makespan_cost_per_time_unit());
  }

  // int32 seed = 24;
  if (this->_internal_seed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JsspInputProblem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JsspInputProblem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JsspInputProblem::GetClassData() const { return &_class_data_; }

void JsspInputProblem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JsspInputProblem *>(to)->MergeFrom(
      static_cast<const JsspInputProblem &>(from));
}


void JsspInputProblem::MergeFrom(const JsspInputProblem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.jssp.JsspInputProblem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  jobs_.MergeFrom(from.jobs_);
  machines_.MergeFrom(from.machines_);
  precedences_.MergeFrom(from.precedences_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_scaling_factor()) {
    _internal_mutable_scaling_factor()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_scaling_factor());
  }
  if (from._internal_makespan_cost_per_time_unit() != 0) {
    _internal_set_makespan_cost_per_time_unit(from._internal_makespan_cost_per_time_unit());
  }
  if (from._internal_seed() != 0) {
    _internal_set_seed(from._internal_seed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JsspInputProblem::CopyFrom(const JsspInputProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.jssp.JsspInputProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JsspInputProblem::IsInitialized() const {
  return true;
}

void JsspInputProblem::InternalSwap(JsspInputProblem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  jobs_.InternalSwap(&other->jobs_);
  machines_.InternalSwap(&other->machines_);
  precedences_.InternalSwap(&other->precedences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JsspInputProblem, seed_)
      + sizeof(JsspInputProblem::seed_)
      - PROTOBUF_FIELD_OFFSET(JsspInputProblem, scaling_factor_)>(
          reinterpret_cast<char*>(&scaling_factor_),
          reinterpret_cast<char*>(&other->scaling_factor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JsspInputProblem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[5]);
}

// ===================================================================

class AssignedTask::_Internal {
 public:
};

AssignedTask::AssignedTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.jssp.AssignedTask)
}
AssignedTask::AssignedTask(const AssignedTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&alternative_index_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(alternative_index_));
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.jssp.AssignedTask)
}

inline void AssignedTask::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alternative_index_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(alternative_index_));
}

AssignedTask::~AssignedTask() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.jssp.AssignedTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssignedTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AssignedTask::ArenaDtor(void* object) {
  AssignedTask* _this = reinterpret_cast< AssignedTask* >(object);
  (void)_this;
}
void AssignedTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssignedTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssignedTask::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.jssp.AssignedTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alternative_index_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(alternative_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignedTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 alternative_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          alternative_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignedTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.jssp.AssignedTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 alternative_index = 1;
  if (this->_internal_alternative_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_alternative_index(), target);
  }

  // int64 start_time = 2;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.jssp.AssignedTask)
  return target;
}

size_t AssignedTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.jssp.AssignedTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start_time = 2;
  if (this->_internal_start_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_start_time());
  }

  // int32 alternative_index = 1;
  if (this->_internal_alternative_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_alternative_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignedTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssignedTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignedTask::GetClassData() const { return &_class_data_; }

void AssignedTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssignedTask *>(to)->MergeFrom(
      static_cast<const AssignedTask &>(from));
}


void AssignedTask::MergeFrom(const AssignedTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.jssp.AssignedTask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_alternative_index() != 0) {
    _internal_set_alternative_index(from._internal_alternative_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignedTask::CopyFrom(const AssignedTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.jssp.AssignedTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignedTask::IsInitialized() const {
  return true;
}

void AssignedTask::InternalSwap(AssignedTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssignedTask, alternative_index_)
      + sizeof(AssignedTask::alternative_index_)
      - PROTOBUF_FIELD_OFFSET(AssignedTask, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignedTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[6]);
}

// ===================================================================

class AssignedJob::_Internal {
 public:
};

AssignedJob::AssignedJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.jssp.AssignedJob)
}
AssignedJob::AssignedJob(const AssignedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&due_date_cost_, &from.due_date_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_of_task_costs_) -
    reinterpret_cast<char*>(&due_date_cost_)) + sizeof(sum_of_task_costs_));
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.jssp.AssignedJob)
}

inline void AssignedJob::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&due_date_cost_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sum_of_task_costs_) -
    reinterpret_cast<char*>(&due_date_cost_)) + sizeof(sum_of_task_costs_));
}

AssignedJob::~AssignedJob() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.jssp.AssignedJob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AssignedJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AssignedJob::ArenaDtor(void* object) {
  AssignedJob* _this = reinterpret_cast< AssignedJob* >(object);
  (void)_this;
}
void AssignedJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssignedJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AssignedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.jssp.AssignedJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  ::memset(&due_date_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_of_task_costs_) -
      reinterpret_cast<char*>(&due_date_cost_)) + sizeof(sum_of_task_costs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignedJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.scheduling.jssp.AssignedTask tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 due_date_cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          due_date_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sum_of_task_costs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sum_of_task_costs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignedJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.jssp.AssignedJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.jssp.AssignedTask tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tasks(i), target, stream);
  }

  // int64 due_date_cost = 2;
  if (this->_internal_due_date_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_due_date_cost(), target);
  }

  // int64 sum_of_task_costs = 3;
  if (this->_internal_sum_of_task_costs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sum_of_task_costs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.jssp.AssignedJob)
  return target;
}

size_t AssignedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.jssp.AssignedJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.jssp.AssignedTask tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 due_date_cost = 2;
  if (this->_internal_due_date_cost() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_due_date_cost());
  }

  // int64 sum_of_task_costs = 3;
  if (this->_internal_sum_of_task_costs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sum_of_task_costs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignedJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AssignedJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignedJob::GetClassData() const { return &_class_data_; }

void AssignedJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AssignedJob *>(to)->MergeFrom(
      static_cast<const AssignedJob &>(from));
}


void AssignedJob::MergeFrom(const AssignedJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.jssp.AssignedJob)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from._internal_due_date_cost() != 0) {
    _internal_set_due_date_cost(from._internal_due_date_cost());
  }
  if (from._internal_sum_of_task_costs() != 0) {
    _internal_set_sum_of_task_costs(from._internal_sum_of_task_costs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignedJob::CopyFrom(const AssignedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.jssp.AssignedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignedJob::IsInitialized() const {
  return true;
}

void AssignedJob::InternalSwap(AssignedJob* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssignedJob, sum_of_task_costs_)
      + sizeof(AssignedJob::sum_of_task_costs_)
      - PROTOBUF_FIELD_OFFSET(AssignedJob, due_date_cost_)>(
          reinterpret_cast<char*>(&due_date_cost_),
          reinterpret_cast<char*>(&other->due_date_cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignedJob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[7]);
}

// ===================================================================

class JsspOutputSolution::_Internal {
 public:
};

JsspOutputSolution::JsspOutputSolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  jobs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.scheduling.jssp.JsspOutputSolution)
}
JsspOutputSolution::JsspOutputSolution(const JsspOutputSolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      jobs_(from.jobs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&makespan_cost_, &from.makespan_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_cost_) -
    reinterpret_cast<char*>(&makespan_cost_)) + sizeof(total_cost_));
  // @@protoc_insertion_point(copy_constructor:operations_research.scheduling.jssp.JsspOutputSolution)
}

inline void JsspOutputSolution::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&makespan_cost_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_cost_) -
    reinterpret_cast<char*>(&makespan_cost_)) + sizeof(total_cost_));
}

JsspOutputSolution::~JsspOutputSolution() {
  // @@protoc_insertion_point(destructor:operations_research.scheduling.jssp.JsspOutputSolution)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JsspOutputSolution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JsspOutputSolution::ArenaDtor(void* object) {
  JsspOutputSolution* _this = reinterpret_cast< JsspOutputSolution* >(object);
  (void)_this;
}
void JsspOutputSolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JsspOutputSolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JsspOutputSolution::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.scheduling.jssp.JsspOutputSolution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jobs_.Clear();
  ::memset(&makespan_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_cost_) -
      reinterpret_cast<char*>(&makespan_cost_)) + sizeof(total_cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JsspOutputSolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .operations_research.scheduling.jssp.AssignedJob jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 makespan_cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          makespan_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          total_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JsspOutputSolution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.scheduling.jssp.JsspOutputSolution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.jssp.AssignedJob jobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_jobs(i), target, stream);
  }

  // int64 makespan_cost = 2;
  if (this->_internal_makespan_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_makespan_cost(), target);
  }

  // int64 total_cost = 3;
  if (this->_internal_total_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.scheduling.jssp.JsspOutputSolution)
  return target;
}

size_t JsspOutputSolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.scheduling.jssp.JsspOutputSolution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.scheduling.jssp.AssignedJob jobs = 1;
  total_size += 1UL * this->_internal_jobs_size();
  for (const auto& msg : this->jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 makespan_cost = 2;
  if (this->_internal_makespan_cost() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_makespan_cost());
  }

  // int64 total_cost = 3;
  if (this->_internal_total_cost() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_total_cost());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JsspOutputSolution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JsspOutputSolution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JsspOutputSolution::GetClassData() const { return &_class_data_; }

void JsspOutputSolution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JsspOutputSolution *>(to)->MergeFrom(
      static_cast<const JsspOutputSolution &>(from));
}


void JsspOutputSolution::MergeFrom(const JsspOutputSolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.scheduling.jssp.JsspOutputSolution)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  jobs_.MergeFrom(from.jobs_);
  if (from._internal_makespan_cost() != 0) {
    _internal_set_makespan_cost(from._internal_makespan_cost());
  }
  if (from._internal_total_cost() != 0) {
    _internal_set_total_cost(from._internal_total_cost());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JsspOutputSolution::CopyFrom(const JsspOutputSolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.scheduling.jssp.JsspOutputSolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JsspOutputSolution::IsInitialized() const {
  return true;
}

void JsspOutputSolution::InternalSwap(JsspOutputSolution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  jobs_.InternalSwap(&other->jobs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JsspOutputSolution, total_cost_)
      + sizeof(JsspOutputSolution::total_cost_)
      - PROTOBUF_FIELD_OFFSET(JsspOutputSolution, makespan_cost_)>(
          reinterpret_cast<char*>(&makespan_cost_),
          reinterpret_cast<char*>(&other->makespan_cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JsspOutputSolution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_getter, &descriptor_table_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto_once,
      file_level_metadata_ortools_2fscheduling_2fjobshop_5fscheduling_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace jssp
}  // namespace scheduling
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::jssp::Task* Arena::CreateMaybeMessage< ::operations_research::scheduling::jssp::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::jssp::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::jssp::Job* Arena::CreateMaybeMessage< ::operations_research::scheduling::jssp::Job >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::jssp::Job >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::jssp::TransitionTimeMatrix* Arena::CreateMaybeMessage< ::operations_research::scheduling::jssp::TransitionTimeMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::jssp::TransitionTimeMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::jssp::Machine* Arena::CreateMaybeMessage< ::operations_research::scheduling::jssp::Machine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::jssp::Machine >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::jssp::JobPrecedence* Arena::CreateMaybeMessage< ::operations_research::scheduling::jssp::JobPrecedence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::jssp::JobPrecedence >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::jssp::JsspInputProblem* Arena::CreateMaybeMessage< ::operations_research::scheduling::jssp::JsspInputProblem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::jssp::JsspInputProblem >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::jssp::AssignedTask* Arena::CreateMaybeMessage< ::operations_research::scheduling::jssp::AssignedTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::jssp::AssignedTask >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::jssp::AssignedJob* Arena::CreateMaybeMessage< ::operations_research::scheduling::jssp::AssignedJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::jssp::AssignedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::scheduling::jssp::JsspOutputSolution* Arena::CreateMaybeMessage< ::operations_research::scheduling::jssp::JsspOutputSolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::scheduling::jssp::JsspOutputSolution >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
