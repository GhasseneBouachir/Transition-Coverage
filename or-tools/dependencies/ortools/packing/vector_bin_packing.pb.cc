// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/packing/vector_bin_packing.proto

#include "ortools/packing/vector_bin_packing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace operations_research {
namespace packing {
namespace vbp {
constexpr Item::Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_usage_()
  , _resource_usage_cached_byte_size_(0)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_copies_(0)
  , max_number_of_copies_per_bin_(0){}
struct ItemDefaultTypeInternal {
  constexpr ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemDefaultTypeInternal _Item_default_instance_;
constexpr VectorBinPackingProblem::VectorBinPackingProblem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_capacity_()
  , _resource_capacity_cached_byte_size_(0)
  , resource_name_()
  , item_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_bins_(0){}
struct VectorBinPackingProblemDefaultTypeInternal {
  constexpr VectorBinPackingProblemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBinPackingProblemDefaultTypeInternal() {}
  union {
    VectorBinPackingProblem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBinPackingProblemDefaultTypeInternal _VectorBinPackingProblem_default_instance_;
constexpr VectorBinPackingOneBinInSolution::VectorBinPackingOneBinInSolution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_indices_()
  , _item_indices_cached_byte_size_(0)
  , item_copies_()
  , _item_copies_cached_byte_size_(0){}
struct VectorBinPackingOneBinInSolutionDefaultTypeInternal {
  constexpr VectorBinPackingOneBinInSolutionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBinPackingOneBinInSolutionDefaultTypeInternal() {}
  union {
    VectorBinPackingOneBinInSolution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBinPackingOneBinInSolutionDefaultTypeInternal _VectorBinPackingOneBinInSolution_default_instance_;
constexpr VectorBinPackingSolution::VectorBinPackingSolution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bins_()
  , solver_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , objective_value_(0)
  , solve_time_in_seconds_(0)
  , arc_flow_time_in_seconds_(0)
  , status_(0)
{}
struct VectorBinPackingSolutionDefaultTypeInternal {
  constexpr VectorBinPackingSolutionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorBinPackingSolutionDefaultTypeInternal() {}
  union {
    VectorBinPackingSolution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorBinPackingSolutionDefaultTypeInternal _VectorBinPackingSolution_default_instance_;
}  // namespace vbp
}  // namespace packing
}  // namespace operations_research
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::Item, name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::Item, resource_usage_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::Item, num_copies_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::Item, max_number_of_copies_per_bin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingProblem, name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingProblem, resource_capacity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingProblem, resource_name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingProblem, item_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingProblem, max_bins_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingOneBinInSolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingOneBinInSolution, item_indices_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingOneBinInSolution, item_copies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingSolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingSolution, solver_info_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingSolution, bins_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingSolution, status_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingSolution, objective_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingSolution, solve_time_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::packing::vbp::VectorBinPackingSolution, arc_flow_time_in_seconds_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operations_research::packing::vbp::Item)},
  { 10, -1, -1, sizeof(::operations_research::packing::vbp::VectorBinPackingProblem)},
  { 21, -1, -1, sizeof(::operations_research::packing::vbp::VectorBinPackingOneBinInSolution)},
  { 29, -1, -1, sizeof(::operations_research::packing::vbp::VectorBinPackingSolution)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::packing::vbp::_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::packing::vbp::_VectorBinPackingProblem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::packing::vbp::_VectorBinPackingOneBinInSolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::packing::vbp::_VectorBinPackingSolution_default_instance_),
};

const char descriptor_table_protodef_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(ortools/packing/vector_bin_packing.pro"
  "to\022\037operations_research.packing.vbp\"f\n\004I"
  "tem\022\014\n\004name\030\001 \001(\t\022\026\n\016resource_usage\030\002 \003("
  "\003\022\022\n\nnum_copies\030\003 \001(\005\022$\n\034max_number_of_c"
  "opies_per_bin\030\004 \001(\005\"\240\001\n\027VectorBinPacking"
  "Problem\022\014\n\004name\030\001 \001(\t\022\031\n\021resource_capaci"
  "ty\030\002 \003(\003\022\025\n\rresource_name\030\003 \003(\t\0223\n\004item\030"
  "\004 \003(\0132%.operations_research.packing.vbp."
  "Item\022\020\n\010max_bins\030\005 \001(\005\"M\n VectorBinPacki"
  "ngOneBinInSolution\022\024\n\014item_indices\030\001 \003(\005"
  "\022\023\n\013item_copies\030\002 \003(\005\"\250\002\n\030VectorBinPacki"
  "ngSolution\022\023\n\013solver_info\030\001 \001(\t\022O\n\004bins\030"
  "\002 \003(\0132A.operations_research.packing.vbp."
  "VectorBinPackingOneBinInSolution\022L\n\006stat"
  "us\030\003 \001(\0162<.operations_research.packing.v"
  "bp.VectorBinPackingSolveStatus\022\027\n\017object"
  "ive_value\030\004 \001(\001\022\035\n\025solve_time_in_seconds"
  "\030\005 \001(\001\022 \n\030arc_flow_time_in_seconds\030\006 \001(\001"
  "*y\n\033VectorBinPackingSolveStatus\022/\n+VECTO"
  "R_BIN_PACKING_SOLVE_STATUS_UNSPECIFIED\020\000"
  "\022\013\n\007OPTIMAL\020\001\022\014\n\010FEASIBLE\020\002\022\016\n\nINFEASIBL"
  "E\020\003B\?\n\036com.google.ortools.packing.vbpP\001\252"
  "\002\032Google.OrTools.Packing.Vbpb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto = {
  false, false, 916, descriptor_table_protodef_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto, "ortools/packing/vector_bin_packing.proto", 
  &descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto::offsets,
  file_level_metadata_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto, file_level_enum_descriptors_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto, file_level_service_descriptors_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_getter() {
  return &descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto(&descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto);
namespace operations_research {
namespace packing {
namespace vbp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VectorBinPackingSolveStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto);
  return file_level_enum_descriptors_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto[0];
}
bool VectorBinPackingSolveStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Item::_Internal {
 public:
};

Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resource_usage_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.packing.vbp.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_usage_(from.resource_usage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&num_copies_, &from.num_copies_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_copies_per_bin_) -
    reinterpret_cast<char*>(&num_copies_)) + sizeof(max_number_of_copies_per_bin_));
  // @@protoc_insertion_point(copy_constructor:operations_research.packing.vbp.Item)
}

inline void Item::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_copies_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_copies_per_bin_) -
    reinterpret_cast<char*>(&num_copies_)) + sizeof(max_number_of_copies_per_bin_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:operations_research.packing.vbp.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Item::ArenaDtor(void* object) {
  Item* _this = reinterpret_cast< Item* >(object);
  (void)_this;
}
void Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.packing.vbp.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_usage_.Clear();
  name_.ClearToEmpty();
  ::memset(&num_copies_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_copies_per_bin_) -
      reinterpret_cast<char*>(&num_copies_)) + sizeof(max_number_of_copies_per_bin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.packing.vbp.Item.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 resource_usage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_resource_usage(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_resource_usage(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_copies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          num_copies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_number_of_copies_per_bin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          max_number_of_copies_per_bin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.packing.vbp.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.packing.vbp.Item.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated int64 resource_usage = 2;
  {
    int byte_size = _resource_usage_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_resource_usage(), byte_size, target);
    }
  }

  // int32 num_copies = 3;
  if (this->_internal_num_copies() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_copies(), target);
  }

  // int32 max_number_of_copies_per_bin = 4;
  if (this->_internal_max_number_of_copies_per_bin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_number_of_copies_per_bin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.packing.vbp.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.packing.vbp.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 resource_usage = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->resource_usage_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _resource_usage_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 num_copies = 3;
  if (this->_internal_num_copies() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_copies());
  }

  // int32 max_number_of_copies_per_bin = 4;
  if (this->_internal_max_number_of_copies_per_bin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_number_of_copies_per_bin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }

void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Item *>(to)->MergeFrom(
      static_cast<const Item &>(from));
}


void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.packing.vbp.Item)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  resource_usage_.MergeFrom(from.resource_usage_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_num_copies() != 0) {
    _internal_set_num_copies(from._internal_num_copies());
  }
  if (from._internal_max_number_of_copies_per_bin() != 0) {
    _internal_set_max_number_of_copies_per_bin(from._internal_max_number_of_copies_per_bin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.packing.vbp.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resource_usage_.InternalSwap(&other->resource_usage_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Item, max_number_of_copies_per_bin_)
      + sizeof(Item::max_number_of_copies_per_bin_)
      - PROTOBUF_FIELD_OFFSET(Item, num_copies_)>(
          reinterpret_cast<char*>(&num_copies_),
          reinterpret_cast<char*>(&other->num_copies_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_getter, &descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_once,
      file_level_metadata_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto[0]);
}

// ===================================================================

class VectorBinPackingProblem::_Internal {
 public:
};

VectorBinPackingProblem::VectorBinPackingProblem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resource_capacity_(arena),
  resource_name_(arena),
  item_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.packing.vbp.VectorBinPackingProblem)
}
VectorBinPackingProblem::VectorBinPackingProblem(const VectorBinPackingProblem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_capacity_(from.resource_capacity_),
      resource_name_(from.resource_name_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  max_bins_ = from.max_bins_;
  // @@protoc_insertion_point(copy_constructor:operations_research.packing.vbp.VectorBinPackingProblem)
}

inline void VectorBinPackingProblem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
max_bins_ = 0;
}

VectorBinPackingProblem::~VectorBinPackingProblem() {
  // @@protoc_insertion_point(destructor:operations_research.packing.vbp.VectorBinPackingProblem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorBinPackingProblem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorBinPackingProblem::ArenaDtor(void* object) {
  VectorBinPackingProblem* _this = reinterpret_cast< VectorBinPackingProblem* >(object);
  (void)_this;
}
void VectorBinPackingProblem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBinPackingProblem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBinPackingProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.packing.vbp.VectorBinPackingProblem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_capacity_.Clear();
  resource_name_.Clear();
  item_.Clear();
  name_.ClearToEmpty();
  max_bins_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBinPackingProblem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.packing.vbp.VectorBinPackingProblem.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 resource_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_resource_capacity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_resource_capacity(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string resource_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resource_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.packing.vbp.VectorBinPackingProblem.resource_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.packing.vbp.Item item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 max_bins = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          max_bins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorBinPackingProblem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.packing.vbp.VectorBinPackingProblem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.packing.vbp.VectorBinPackingProblem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated int64 resource_capacity = 2;
  {
    int byte_size = _resource_capacity_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_resource_capacity(), byte_size, target);
    }
  }

  // repeated string resource_name = 3;
  for (int i = 0, n = this->_internal_resource_name_size(); i < n; i++) {
    const auto& s = this->_internal_resource_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.packing.vbp.VectorBinPackingProblem.resource_name");
    target = stream->WriteString(3, s, target);
  }

  // repeated .operations_research.packing.vbp.Item item = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_item(i), target, stream);
  }

  // int32 max_bins = 5;
  if (this->_internal_max_bins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_bins(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.packing.vbp.VectorBinPackingProblem)
  return target;
}

size_t VectorBinPackingProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.packing.vbp.VectorBinPackingProblem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 resource_capacity = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->resource_capacity_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _resource_capacity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string resource_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(resource_name_.size());
  for (int i = 0, n = resource_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      resource_name_.Get(i));
  }

  // repeated .operations_research.packing.vbp.Item item = 4;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 max_bins = 5;
  if (this->_internal_max_bins() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_bins());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorBinPackingProblem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorBinPackingProblem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorBinPackingProblem::GetClassData() const { return &_class_data_; }

void VectorBinPackingProblem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorBinPackingProblem *>(to)->MergeFrom(
      static_cast<const VectorBinPackingProblem &>(from));
}


void VectorBinPackingProblem::MergeFrom(const VectorBinPackingProblem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.packing.vbp.VectorBinPackingProblem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  resource_capacity_.MergeFrom(from.resource_capacity_);
  resource_name_.MergeFrom(from.resource_name_);
  item_.MergeFrom(from.item_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_max_bins() != 0) {
    _internal_set_max_bins(from._internal_max_bins());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBinPackingProblem::CopyFrom(const VectorBinPackingProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.packing.vbp.VectorBinPackingProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBinPackingProblem::IsInitialized() const {
  return true;
}

void VectorBinPackingProblem::InternalSwap(VectorBinPackingProblem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resource_capacity_.InternalSwap(&other->resource_capacity_);
  resource_name_.InternalSwap(&other->resource_name_);
  item_.InternalSwap(&other->item_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(max_bins_, other->max_bins_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBinPackingProblem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_getter, &descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_once,
      file_level_metadata_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto[1]);
}

// ===================================================================

class VectorBinPackingOneBinInSolution::_Internal {
 public:
};

VectorBinPackingOneBinInSolution::VectorBinPackingOneBinInSolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  item_indices_(arena),
  item_copies_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
}
VectorBinPackingOneBinInSolution::VectorBinPackingOneBinInSolution(const VectorBinPackingOneBinInSolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_indices_(from.item_indices_),
      item_copies_(from.item_copies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
}

inline void VectorBinPackingOneBinInSolution::SharedCtor() {
}

VectorBinPackingOneBinInSolution::~VectorBinPackingOneBinInSolution() {
  // @@protoc_insertion_point(destructor:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorBinPackingOneBinInSolution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorBinPackingOneBinInSolution::ArenaDtor(void* object) {
  VectorBinPackingOneBinInSolution* _this = reinterpret_cast< VectorBinPackingOneBinInSolution* >(object);
  (void)_this;
}
void VectorBinPackingOneBinInSolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBinPackingOneBinInSolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBinPackingOneBinInSolution::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_indices_.Clear();
  item_copies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBinPackingOneBinInSolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 item_indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_item_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_item_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 item_copies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_item_copies(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_item_copies(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorBinPackingOneBinInSolution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 item_indices = 1;
  {
    int byte_size = _item_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_item_indices(), byte_size, target);
    }
  }

  // repeated int32 item_copies = 2;
  {
    int byte_size = _item_copies_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_item_copies(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
  return target;
}

size_t VectorBinPackingOneBinInSolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 item_indices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->item_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _item_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 item_copies = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->item_copies_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _item_copies_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorBinPackingOneBinInSolution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorBinPackingOneBinInSolution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorBinPackingOneBinInSolution::GetClassData() const { return &_class_data_; }

void VectorBinPackingOneBinInSolution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorBinPackingOneBinInSolution *>(to)->MergeFrom(
      static_cast<const VectorBinPackingOneBinInSolution &>(from));
}


void VectorBinPackingOneBinInSolution::MergeFrom(const VectorBinPackingOneBinInSolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  item_indices_.MergeFrom(from.item_indices_);
  item_copies_.MergeFrom(from.item_copies_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBinPackingOneBinInSolution::CopyFrom(const VectorBinPackingOneBinInSolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBinPackingOneBinInSolution::IsInitialized() const {
  return true;
}

void VectorBinPackingOneBinInSolution::InternalSwap(VectorBinPackingOneBinInSolution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  item_indices_.InternalSwap(&other->item_indices_);
  item_copies_.InternalSwap(&other->item_copies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBinPackingOneBinInSolution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_getter, &descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_once,
      file_level_metadata_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto[2]);
}

// ===================================================================

class VectorBinPackingSolution::_Internal {
 public:
};

VectorBinPackingSolution::VectorBinPackingSolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bins_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.packing.vbp.VectorBinPackingSolution)
}
VectorBinPackingSolution::VectorBinPackingSolution(const VectorBinPackingSolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bins_(from.bins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  solver_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    solver_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_solver_info().empty()) {
    solver_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_solver_info(), 
      GetArenaForAllocation());
  }
  ::memcpy(&objective_value_, &from.objective_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&objective_value_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:operations_research.packing.vbp.VectorBinPackingSolution)
}

inline void VectorBinPackingSolution::SharedCtor() {
solver_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  solver_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objective_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&objective_value_)) + sizeof(status_));
}

VectorBinPackingSolution::~VectorBinPackingSolution() {
  // @@protoc_insertion_point(destructor:operations_research.packing.vbp.VectorBinPackingSolution)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VectorBinPackingSolution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  solver_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorBinPackingSolution::ArenaDtor(void* object) {
  VectorBinPackingSolution* _this = reinterpret_cast< VectorBinPackingSolution* >(object);
  (void)_this;
}
void VectorBinPackingSolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorBinPackingSolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorBinPackingSolution::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.packing.vbp.VectorBinPackingSolution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bins_.Clear();
  solver_info_.ClearToEmpty();
  ::memset(&objective_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&objective_value_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorBinPackingSolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string solver_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_solver_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.packing.vbp.VectorBinPackingSolution.solver_info"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .operations_research.packing.vbp.VectorBinPackingOneBinInSolution bins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .operations_research.packing.vbp.VectorBinPackingSolveStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::operations_research::packing::vbp::VectorBinPackingSolveStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // double objective_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          objective_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double solve_time_in_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          solve_time_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double arc_flow_time_in_seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          arc_flow_time_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorBinPackingSolution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.packing.vbp.VectorBinPackingSolution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string solver_info = 1;
  if (!this->_internal_solver_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_solver_info().data(), static_cast<int>(this->_internal_solver_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.packing.vbp.VectorBinPackingSolution.solver_info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_solver_info(), target);
  }

  // repeated .operations_research.packing.vbp.VectorBinPackingOneBinInSolution bins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bins(i), target, stream);
  }

  // .operations_research.packing.vbp.VectorBinPackingSolveStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // double objective_value = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_objective_value = this->_internal_objective_value();
  uint64_t raw_objective_value;
  memcpy(&raw_objective_value, &tmp_objective_value, sizeof(tmp_objective_value));
  if (raw_objective_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_objective_value(), target);
  }

  // double solve_time_in_seconds = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_solve_time_in_seconds = this->_internal_solve_time_in_seconds();
  uint64_t raw_solve_time_in_seconds;
  memcpy(&raw_solve_time_in_seconds, &tmp_solve_time_in_seconds, sizeof(tmp_solve_time_in_seconds));
  if (raw_solve_time_in_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_solve_time_in_seconds(), target);
  }

  // double arc_flow_time_in_seconds = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_arc_flow_time_in_seconds = this->_internal_arc_flow_time_in_seconds();
  uint64_t raw_arc_flow_time_in_seconds;
  memcpy(&raw_arc_flow_time_in_seconds, &tmp_arc_flow_time_in_seconds, sizeof(tmp_arc_flow_time_in_seconds));
  if (raw_arc_flow_time_in_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_arc_flow_time_in_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.packing.vbp.VectorBinPackingSolution)
  return target;
}

size_t VectorBinPackingSolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.packing.vbp.VectorBinPackingSolution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.packing.vbp.VectorBinPackingOneBinInSolution bins = 2;
  total_size += 1UL * this->_internal_bins_size();
  for (const auto& msg : this->bins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string solver_info = 1;
  if (!this->_internal_solver_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_solver_info());
  }

  // double objective_value = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_objective_value = this->_internal_objective_value();
  uint64_t raw_objective_value;
  memcpy(&raw_objective_value, &tmp_objective_value, sizeof(tmp_objective_value));
  if (raw_objective_value != 0) {
    total_size += 1 + 8;
  }

  // double solve_time_in_seconds = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_solve_time_in_seconds = this->_internal_solve_time_in_seconds();
  uint64_t raw_solve_time_in_seconds;
  memcpy(&raw_solve_time_in_seconds, &tmp_solve_time_in_seconds, sizeof(tmp_solve_time_in_seconds));
  if (raw_solve_time_in_seconds != 0) {
    total_size += 1 + 8;
  }

  // double arc_flow_time_in_seconds = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_arc_flow_time_in_seconds = this->_internal_arc_flow_time_in_seconds();
  uint64_t raw_arc_flow_time_in_seconds;
  memcpy(&raw_arc_flow_time_in_seconds, &tmp_arc_flow_time_in_seconds, sizeof(tmp_arc_flow_time_in_seconds));
  if (raw_arc_flow_time_in_seconds != 0) {
    total_size += 1 + 8;
  }

  // .operations_research.packing.vbp.VectorBinPackingSolveStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorBinPackingSolution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VectorBinPackingSolution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorBinPackingSolution::GetClassData() const { return &_class_data_; }

void VectorBinPackingSolution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VectorBinPackingSolution *>(to)->MergeFrom(
      static_cast<const VectorBinPackingSolution &>(from));
}


void VectorBinPackingSolution::MergeFrom(const VectorBinPackingSolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.packing.vbp.VectorBinPackingSolution)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bins_.MergeFrom(from.bins_);
  if (!from._internal_solver_info().empty()) {
    _internal_set_solver_info(from._internal_solver_info());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_objective_value = from._internal_objective_value();
  uint64_t raw_objective_value;
  memcpy(&raw_objective_value, &tmp_objective_value, sizeof(tmp_objective_value));
  if (raw_objective_value != 0) {
    _internal_set_objective_value(from._internal_objective_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_solve_time_in_seconds = from._internal_solve_time_in_seconds();
  uint64_t raw_solve_time_in_seconds;
  memcpy(&raw_solve_time_in_seconds, &tmp_solve_time_in_seconds, sizeof(tmp_solve_time_in_seconds));
  if (raw_solve_time_in_seconds != 0) {
    _internal_set_solve_time_in_seconds(from._internal_solve_time_in_seconds());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_arc_flow_time_in_seconds = from._internal_arc_flow_time_in_seconds();
  uint64_t raw_arc_flow_time_in_seconds;
  memcpy(&raw_arc_flow_time_in_seconds, &tmp_arc_flow_time_in_seconds, sizeof(tmp_arc_flow_time_in_seconds));
  if (raw_arc_flow_time_in_seconds != 0) {
    _internal_set_arc_flow_time_in_seconds(from._internal_arc_flow_time_in_seconds());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorBinPackingSolution::CopyFrom(const VectorBinPackingSolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.packing.vbp.VectorBinPackingSolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorBinPackingSolution::IsInitialized() const {
  return true;
}

void VectorBinPackingSolution::InternalSwap(VectorBinPackingSolution* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bins_.InternalSwap(&other->bins_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &solver_info_, lhs_arena,
      &other->solver_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorBinPackingSolution, status_)
      + sizeof(VectorBinPackingSolution::status_)
      - PROTOBUF_FIELD_OFFSET(VectorBinPackingSolution, objective_value_)>(
          reinterpret_cast<char*>(&objective_value_),
          reinterpret_cast<char*>(&other->objective_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorBinPackingSolution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_getter, &descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_once,
      file_level_metadata_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vbp
}  // namespace packing
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::packing::vbp::Item* Arena::CreateMaybeMessage< ::operations_research::packing::vbp::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::packing::vbp::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::packing::vbp::VectorBinPackingProblem* Arena::CreateMaybeMessage< ::operations_research::packing::vbp::VectorBinPackingProblem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::packing::vbp::VectorBinPackingProblem >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* Arena::CreateMaybeMessage< ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::packing::vbp::VectorBinPackingSolution* Arena::CreateMaybeMessage< ::operations_research::packing::vbp::VectorBinPackingSolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::packing::vbp::VectorBinPackingSolution >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
