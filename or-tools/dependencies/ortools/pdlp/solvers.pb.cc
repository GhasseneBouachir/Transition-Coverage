// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/pdlp/solvers.proto

#include "ortools/pdlp/solvers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace operations_research {
namespace pdlp {
constexpr TerminationCriteria::TerminationCriteria(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eps_optimal_absolute_(1e-06)
  , eps_optimal_relative_(1e-06)
  , eps_primal_infeasible_(1e-08)
  , optimality_norm_(2)

  , iteration_limit_(2147483647)
  , eps_dual_infeasible_(1e-08)
  , time_sec_limit_(std::numeric_limits<double>::infinity())
  , kkt_matrix_pass_limit_(std::numeric_limits<double>::infinity()){}
struct TerminationCriteriaDefaultTypeInternal {
  constexpr TerminationCriteriaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TerminationCriteriaDefaultTypeInternal() {}
  union {
    TerminationCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TerminationCriteriaDefaultTypeInternal _TerminationCriteria_default_instance_;
constexpr AdaptiveLinesearchParams::AdaptiveLinesearchParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : step_size_reduction_exponent_(0.3)
  , step_size_growth_exponent_(0.6){}
struct AdaptiveLinesearchParamsDefaultTypeInternal {
  constexpr AdaptiveLinesearchParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdaptiveLinesearchParamsDefaultTypeInternal() {}
  union {
    AdaptiveLinesearchParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdaptiveLinesearchParamsDefaultTypeInternal _AdaptiveLinesearchParams_default_instance_;
constexpr MalitskyPockParams::MalitskyPockParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : step_size_downscaling_factor_(0.7)
  , linesearch_contraction_factor_(0.99)
  , step_size_interpolation_(1){}
struct MalitskyPockParamsDefaultTypeInternal {
  constexpr MalitskyPockParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MalitskyPockParamsDefaultTypeInternal() {}
  union {
    MalitskyPockParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MalitskyPockParamsDefaultTypeInternal _MalitskyPockParams_default_instance_;
constexpr PrimalDualHybridGradientParams_PresolveOptions::PrimalDualHybridGradientParams_PresolveOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : glop_parameters_(nullptr)
  , use_glop_(false){}
struct PrimalDualHybridGradientParams_PresolveOptionsDefaultTypeInternal {
  constexpr PrimalDualHybridGradientParams_PresolveOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrimalDualHybridGradientParams_PresolveOptionsDefaultTypeInternal() {}
  union {
    PrimalDualHybridGradientParams_PresolveOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrimalDualHybridGradientParams_PresolveOptionsDefaultTypeInternal _PrimalDualHybridGradientParams_PresolveOptions_default_instance_;
constexpr PrimalDualHybridGradientParams::PrimalDualHybridGradientParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : random_projection_seeds_()
  , termination_criteria_(nullptr)
  , presolve_options_(nullptr)
  , adaptive_linesearch_parameters_(nullptr)
  , malitsky_pock_parameters_(nullptr)
  , initial_primal_weight_(0)
  , record_iteration_stats_(false)
  , use_diagonal_qp_trust_region_solver_(false)
  , verbosity_level_(0)
  , num_shards_(0)
  , linesearch_rule_(1)

  , num_threads_(1)
  , major_iteration_frequency_(64)
  , termination_check_frequency_(64)
  , restart_strategy_(3)

  , primal_weight_update_smoothing_(0.5)
  , l_inf_ruiz_iterations_(5)
  , l2_norm_rescaling_(true)
  , sufficient_reduction_for_restart_(0.1)
  , necessary_reduction_for_restart_(0.9)
  , infinite_constraint_bound_threshold_(std::numeric_limits<double>::infinity())
  , diagonal_qp_trust_region_solver_tolerance_(1e-08)
  , initial_step_size_scaling_(1){}
struct PrimalDualHybridGradientParamsDefaultTypeInternal {
  constexpr PrimalDualHybridGradientParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrimalDualHybridGradientParamsDefaultTypeInternal() {}
  union {
    PrimalDualHybridGradientParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrimalDualHybridGradientParamsDefaultTypeInternal _PrimalDualHybridGradientParams_default_instance_;
}  // namespace pdlp
}  // namespace operations_research
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ortools_2fpdlp_2fsolvers_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fpdlp_2fsolvers_2eproto = nullptr;

const uint32_t TableStruct_ortools_2fpdlp_2fsolvers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, optimality_norm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, eps_optimal_absolute_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, eps_optimal_relative_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, eps_primal_infeasible_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, eps_dual_infeasible_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, time_sec_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, iteration_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::TerminationCriteria, kkt_matrix_pass_limit_),
  3,
  0,
  1,
  2,
  5,
  6,
  4,
  7,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::AdaptiveLinesearchParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::AdaptiveLinesearchParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::AdaptiveLinesearchParams, step_size_reduction_exponent_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::AdaptiveLinesearchParams, step_size_growth_exponent_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::MalitskyPockParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::MalitskyPockParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::MalitskyPockParams, step_size_downscaling_factor_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::MalitskyPockParams, linesearch_contraction_factor_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::MalitskyPockParams, step_size_interpolation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions, use_glop_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions, glop_parameters_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, termination_criteria_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, num_threads_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, num_shards_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, record_iteration_stats_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, verbosity_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, major_iteration_frequency_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, termination_check_frequency_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, restart_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, primal_weight_update_smoothing_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, initial_primal_weight_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, presolve_options_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, l_inf_ruiz_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, l2_norm_rescaling_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, sufficient_reduction_for_restart_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, necessary_reduction_for_restart_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, linesearch_rule_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, adaptive_linesearch_parameters_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, malitsky_pock_parameters_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, initial_step_size_scaling_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, random_projection_seeds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, infinite_constraint_bound_threshold_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, use_diagonal_qp_trust_region_solver_),
  PROTOBUF_FIELD_OFFSET(::operations_research::pdlp::PrimalDualHybridGradientParams, diagonal_qp_trust_region_solver_tolerance_),
  0,
  10,
  8,
  5,
  7,
  11,
  12,
  13,
  14,
  4,
  1,
  15,
  16,
  17,
  18,
  9,
  2,
  3,
  21,
  ~0u,
  19,
  6,
  20,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::operations_research::pdlp::TerminationCriteria)},
  { 22, 30, -1, sizeof(::operations_research::pdlp::AdaptiveLinesearchParams)},
  { 32, 41, -1, sizeof(::operations_research::pdlp::MalitskyPockParams)},
  { 44, 52, -1, sizeof(::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions)},
  { 54, 83, -1, sizeof(::operations_research::pdlp::PrimalDualHybridGradientParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::pdlp::_TerminationCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::pdlp::_AdaptiveLinesearchParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::pdlp::_MalitskyPockParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::pdlp::_PrimalDualHybridGradientParams_PresolveOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::pdlp::_PrimalDualHybridGradientParams_default_instance_),
};

const char descriptor_table_protodef_ortools_2fpdlp_2fsolvers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032ortools/pdlp/solvers.proto\022\030operations"
  "_research.pdlp\032\035ortools/glop/parameters."
  "proto\"\346\002\n\023TerminationCriteria\022U\n\017optimal"
  "ity_norm\030\001 \001(\0162(.operations_research.pdl"
  "p.OptimalityNorm:\022OPTIMALITY_NORM_L2\022#\n\024"
  "eps_optimal_absolute\030\002 \001(\001:\0051e-06\022#\n\024eps"
  "_optimal_relative\030\003 \001(\001:\0051e-06\022$\n\025eps_pr"
  "imal_infeasible\030\004 \001(\001:\0051e-08\022\"\n\023eps_dual"
  "_infeasible\030\005 \001(\001:\0051e-08\022\033\n\016time_sec_lim"
  "it\030\006 \001(\001:\003inf\022#\n\017iteration_limit\030\007 \001(\005:\n"
  "2147483647\022\"\n\025kkt_matrix_pass_limit\030\010 \001("
  "\001:\003inf\"m\n\030AdaptiveLinesearchParams\022)\n\034st"
  "ep_size_reduction_exponent\030\001 \001(\001:\0030.3\022&\n"
  "\031step_size_growth_exponent\030\002 \001(\001:\0030.6\"\220\001"
  "\n\022MalitskyPockParams\022)\n\034step_size_downsc"
  "aling_factor\030\001 \001(\001:\0030.7\022+\n\035linesearch_co"
  "ntraction_factor\030\002 \001(\001:\0040.99\022\"\n\027step_siz"
  "e_interpolation\030\003 \001(\001:\0011\"\254\r\n\036PrimalDualH"
  "ybridGradientParams\022K\n\024termination_crite"
  "ria\030\001 \001(\0132-.operations_research.pdlp.Ter"
  "minationCriteria\022\026\n\013num_threads\030\002 \001(\005:\0011"
  "\022\025\n\nnum_shards\030\033 \001(\005:\0010\022\036\n\026record_iterat"
  "ion_stats\030\003 \001(\010\022\032\n\017verbosity_level\030\032 \001(\005"
  ":\0010\022%\n\031major_iteration_frequency\030\004 \001(\005:\002"
  "64\022\'\n\033termination_check_frequency\030\005 \001(\005:"
  "\00264\022v\n\020restart_strategy\030\006 \001(\0162H.operatio"
  "ns_research.pdlp.PrimalDualHybridGradien"
  "tParams.RestartStrategy:\022ADAPTIVE_HEURIS"
  "TIC\022+\n\036primal_weight_update_smoothing\030\007 "
  "\001(\001:\0030.5\022\035\n\025initial_primal_weight\030\010 \001(\001\022"
  "b\n\020presolve_options\030\020 \001(\0132H.operations_r"
  "esearch.pdlp.PrimalDualHybridGradientPar"
  "ams.PresolveOptions\022 \n\025l_inf_ruiz_iterat"
  "ions\030\t \001(\005:\0015\022\037\n\021l2_norm_rescaling\030\n \001(\010"
  ":\004true\022-\n sufficient_reduction_for_resta"
  "rt\030\013 \001(\001:\0030.1\022,\n\037necessary_reduction_for"
  "_restart\030\021 \001(\001:\0030.9\022z\n\017linesearch_rule\030\014"
  " \001(\0162G.operations_research.pdlp.PrimalDu"
  "alHybridGradientParams.LinesearchRule:\030A"
  "DAPTIVE_LINESEARCH_RULE\022Z\n\036adaptive_line"
  "search_parameters\030\022 \001(\01322.operations_res"
  "earch.pdlp.AdaptiveLinesearchParams\022N\n\030m"
  "alitsky_pock_parameters\030\023 \001(\0132,.operatio"
  "ns_research.pdlp.MalitskyPockParams\022$\n\031i"
  "nitial_step_size_scaling\030\031 \001(\001:\0011\022#\n\027ran"
  "dom_projection_seeds\030\024 \003(\001B\002\020\001\0220\n#infini"
  "te_constraint_bound_threshold\030\026 \001(\001:\003inf"
  "\0222\n#use_diagonal_qp_trust_region_solver\030"
  "\027 \001(\010:\005false\0228\n)diagonal_qp_trust_region"
  "_solver_tolerance\030\030 \001(\001:\0051e-08\032f\n\017Presol"
  "veOptions\022\020\n\010use_glop\030\001 \001(\010\022A\n\017glop_para"
  "meters\030\002 \001(\0132(.operations_research.glop."
  "GlopParameters\"\224\001\n\017RestartStrategy\022 \n\034RE"
  "START_STRATEGY_UNSPECIFIED\020\000\022\017\n\013NO_RESTA"
  "RTS\020\001\022\031\n\025EVERY_MAJOR_ITERATION\020\002\022\026\n\022ADAP"
  "TIVE_HEURISTIC\020\003\022\033\n\027ADAPTIVE_DISTANCE_BA"
  "SED\020\004\"\217\001\n\016LinesearchRule\022\037\n\033LINESEARCH_R"
  "ULE_UNSPECIFIED\020\000\022\034\n\030ADAPTIVE_LINESEARCH"
  "_RULE\020\001\022!\n\035MALITSKY_POCK_LINESEARCH_RULE"
  "\020\002\022\033\n\027CONSTANT_STEP_SIZE_RULE\020\003J\004\010\r\020\016J\004\010"
  "\016\020\017J\004\010\017\020\020J\004\010\025\020\026*d\n\016OptimalityNorm\022\037\n\033OPT"
  "IMALITY_NORM_UNSPECIFIED\020\000\022\031\n\025OPTIMALITY"
  "_NORM_L_INF\020\001\022\026\n\022OPTIMALITY_NORM_L2\020\002B1\n"
  "\027com.google.ortools.pdlpP\001\252\002\023Google.OrTo"
  "ols.Pdlp"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_deps[1] = {
  &::descriptor_table_ortools_2fglop_2fparameters_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fpdlp_2fsolvers_2eproto = {
  false, false, 2568, descriptor_table_protodef_ortools_2fpdlp_2fsolvers_2eproto, "ortools/pdlp/solvers.proto", 
  &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once, descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_ortools_2fpdlp_2fsolvers_2eproto::offsets,
  file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto, file_level_enum_descriptors_ortools_2fpdlp_2fsolvers_2eproto, file_level_service_descriptors_ortools_2fpdlp_2fsolvers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter() {
  return &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ortools_2fpdlp_2fsolvers_2eproto(&descriptor_table_ortools_2fpdlp_2fsolvers_2eproto);
namespace operations_research {
namespace pdlp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimalDualHybridGradientParams_RestartStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fpdlp_2fsolvers_2eproto);
  return file_level_enum_descriptors_ortools_2fpdlp_2fsolvers_2eproto[0];
}
bool PrimalDualHybridGradientParams_RestartStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::RESTART_STRATEGY_UNSPECIFIED;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::NO_RESTARTS;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::EVERY_MAJOR_ITERATION;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::ADAPTIVE_HEURISTIC;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::ADAPTIVE_DISTANCE_BASED;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::RestartStrategy_MIN;
constexpr PrimalDualHybridGradientParams_RestartStrategy PrimalDualHybridGradientParams::RestartStrategy_MAX;
constexpr int PrimalDualHybridGradientParams::RestartStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimalDualHybridGradientParams_LinesearchRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fpdlp_2fsolvers_2eproto);
  return file_level_enum_descriptors_ortools_2fpdlp_2fsolvers_2eproto[1];
}
bool PrimalDualHybridGradientParams_LinesearchRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::LINESEARCH_RULE_UNSPECIFIED;
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::ADAPTIVE_LINESEARCH_RULE;
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::MALITSKY_POCK_LINESEARCH_RULE;
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::CONSTANT_STEP_SIZE_RULE;
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::LinesearchRule_MIN;
constexpr PrimalDualHybridGradientParams_LinesearchRule PrimalDualHybridGradientParams::LinesearchRule_MAX;
constexpr int PrimalDualHybridGradientParams::LinesearchRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptimalityNorm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fpdlp_2fsolvers_2eproto);
  return file_level_enum_descriptors_ortools_2fpdlp_2fsolvers_2eproto[2];
}
bool OptimalityNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TerminationCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<TerminationCriteria>()._has_bits_);
  static void set_has_optimality_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_eps_optimal_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eps_optimal_relative(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps_primal_infeasible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eps_dual_infeasible(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_sec_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_iteration_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kkt_matrix_pass_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

TerminationCriteria::TerminationCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.TerminationCriteria)
}
TerminationCriteria::TerminationCriteria(const TerminationCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&eps_optimal_absolute_, &from.eps_optimal_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&kkt_matrix_pass_limit_) -
    reinterpret_cast<char*>(&eps_optimal_absolute_)) + sizeof(kkt_matrix_pass_limit_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.TerminationCriteria)
}

inline void TerminationCriteria::SharedCtor() {
eps_optimal_absolute_ = 1e-06;
eps_optimal_relative_ = 1e-06;
eps_primal_infeasible_ = 1e-08;
optimality_norm_ = 2;
iteration_limit_ = 2147483647;
eps_dual_infeasible_ = 1e-08;
time_sec_limit_ = std::numeric_limits<double>::infinity();
kkt_matrix_pass_limit_ = std::numeric_limits<double>::infinity();
}

TerminationCriteria::~TerminationCriteria() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.TerminationCriteria)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TerminationCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TerminationCriteria::ArenaDtor(void* object) {
  TerminationCriteria* _this = reinterpret_cast< TerminationCriteria* >(object);
  (void)_this;
}
void TerminationCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TerminationCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TerminationCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.TerminationCriteria)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    eps_optimal_absolute_ = 1e-06;
    eps_optimal_relative_ = 1e-06;
    eps_primal_infeasible_ = 1e-08;
    optimality_norm_ = 2;
    iteration_limit_ = 2147483647;
    eps_dual_infeasible_ = 1e-08;
    time_sec_limit_ = std::numeric_limits<double>::infinity();
    kkt_matrix_pass_limit_ = std::numeric_limits<double>::infinity();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerminationCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.pdlp.OptimalityNorm optimality_norm = 1 [default = OPTIMALITY_NORM_L2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::OptimalityNorm_IsValid(val))) {
            _internal_set_optimality_norm(static_cast<::operations_research::pdlp::OptimalityNorm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double eps_optimal_absolute = 2 [default = 1e-06];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_eps_optimal_absolute(&has_bits);
          eps_optimal_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_optimal_relative = 3 [default = 1e-06];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_eps_optimal_relative(&has_bits);
          eps_optimal_relative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_primal_infeasible = 4 [default = 1e-08];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_eps_primal_infeasible(&has_bits);
          eps_primal_infeasible_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_dual_infeasible = 5 [default = 1e-08];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_eps_dual_infeasible(&has_bits);
          eps_dual_infeasible_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_sec_limit = 6 [default = inf];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_time_sec_limit(&has_bits);
          time_sec_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 iteration_limit = 7 [default = 2147483647];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_iteration_limit(&has_bits);
          iteration_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double kkt_matrix_pass_limit = 8 [default = inf];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_kkt_matrix_pass_limit(&has_bits);
          kkt_matrix_pass_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TerminationCriteria::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.TerminationCriteria)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.pdlp.OptimalityNorm optimality_norm = 1 [default = OPTIMALITY_NORM_L2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_optimality_norm(), target);
  }

  // optional double eps_optimal_absolute = 2 [default = 1e-06];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_eps_optimal_absolute(), target);
  }

  // optional double eps_optimal_relative = 3 [default = 1e-06];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_eps_optimal_relative(), target);
  }

  // optional double eps_primal_infeasible = 4 [default = 1e-08];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_eps_primal_infeasible(), target);
  }

  // optional double eps_dual_infeasible = 5 [default = 1e-08];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_eps_dual_infeasible(), target);
  }

  // optional double time_sec_limit = 6 [default = inf];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_time_sec_limit(), target);
  }

  // optional int32 iteration_limit = 7 [default = 2147483647];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_iteration_limit(), target);
  }

  // optional double kkt_matrix_pass_limit = 8 [default = inf];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_kkt_matrix_pass_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.TerminationCriteria)
  return target;
}

size_t TerminationCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.TerminationCriteria)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double eps_optimal_absolute = 2 [default = 1e-06];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double eps_optimal_relative = 3 [default = 1e-06];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double eps_primal_infeasible = 4 [default = 1e-08];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .operations_research.pdlp.OptimalityNorm optimality_norm = 1 [default = OPTIMALITY_NORM_L2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optimality_norm());
    }

    // optional int32 iteration_limit = 7 [default = 2147483647];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_iteration_limit());
    }

    // optional double eps_dual_infeasible = 5 [default = 1e-08];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double time_sec_limit = 6 [default = inf];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double kkt_matrix_pass_limit = 8 [default = inf];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TerminationCriteria::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TerminationCriteria::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TerminationCriteria::GetClassData() const { return &_class_data_; }

void TerminationCriteria::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TerminationCriteria *>(to)->MergeFrom(
      static_cast<const TerminationCriteria &>(from));
}


void TerminationCriteria::MergeFrom(const TerminationCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.TerminationCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      eps_optimal_absolute_ = from.eps_optimal_absolute_;
    }
    if (cached_has_bits & 0x00000002u) {
      eps_optimal_relative_ = from.eps_optimal_relative_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_primal_infeasible_ = from.eps_primal_infeasible_;
    }
    if (cached_has_bits & 0x00000008u) {
      optimality_norm_ = from.optimality_norm_;
    }
    if (cached_has_bits & 0x00000010u) {
      iteration_limit_ = from.iteration_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      eps_dual_infeasible_ = from.eps_dual_infeasible_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_sec_limit_ = from.time_sec_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      kkt_matrix_pass_limit_ = from.kkt_matrix_pass_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TerminationCriteria::CopyFrom(const TerminationCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.TerminationCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminationCriteria::IsInitialized() const {
  return true;
}

void TerminationCriteria::InternalSwap(TerminationCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eps_optimal_absolute_, other->eps_optimal_absolute_);
  swap(eps_optimal_relative_, other->eps_optimal_relative_);
  swap(eps_primal_infeasible_, other->eps_primal_infeasible_);
  swap(optimality_norm_, other->optimality_norm_);
  swap(iteration_limit_, other->iteration_limit_);
  swap(eps_dual_infeasible_, other->eps_dual_infeasible_);
  swap(time_sec_limit_, other->time_sec_limit_);
  swap(kkt_matrix_pass_limit_, other->kkt_matrix_pass_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TerminationCriteria::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[0]);
}

// ===================================================================

class AdaptiveLinesearchParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AdaptiveLinesearchParams>()._has_bits_);
  static void set_has_step_size_reduction_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_step_size_growth_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AdaptiveLinesearchParams::AdaptiveLinesearchParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.AdaptiveLinesearchParams)
}
AdaptiveLinesearchParams::AdaptiveLinesearchParams(const AdaptiveLinesearchParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&step_size_reduction_exponent_, &from.step_size_reduction_exponent_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_size_growth_exponent_) -
    reinterpret_cast<char*>(&step_size_reduction_exponent_)) + sizeof(step_size_growth_exponent_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.AdaptiveLinesearchParams)
}

inline void AdaptiveLinesearchParams::SharedCtor() {
step_size_reduction_exponent_ = 0.3;
step_size_growth_exponent_ = 0.6;
}

AdaptiveLinesearchParams::~AdaptiveLinesearchParams() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.AdaptiveLinesearchParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AdaptiveLinesearchParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdaptiveLinesearchParams::ArenaDtor(void* object) {
  AdaptiveLinesearchParams* _this = reinterpret_cast< AdaptiveLinesearchParams* >(object);
  (void)_this;
}
void AdaptiveLinesearchParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdaptiveLinesearchParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdaptiveLinesearchParams::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.AdaptiveLinesearchParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    step_size_reduction_exponent_ = 0.3;
    step_size_growth_exponent_ = 0.6;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdaptiveLinesearchParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double step_size_reduction_exponent = 1 [default = 0.3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_step_size_reduction_exponent(&has_bits);
          step_size_reduction_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double step_size_growth_exponent = 2 [default = 0.6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_step_size_growth_exponent(&has_bits);
          step_size_growth_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdaptiveLinesearchParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.AdaptiveLinesearchParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double step_size_reduction_exponent = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_step_size_reduction_exponent(), target);
  }

  // optional double step_size_growth_exponent = 2 [default = 0.6];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_step_size_growth_exponent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.AdaptiveLinesearchParams)
  return target;
}

size_t AdaptiveLinesearchParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.AdaptiveLinesearchParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double step_size_reduction_exponent = 1 [default = 0.3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double step_size_growth_exponent = 2 [default = 0.6];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdaptiveLinesearchParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AdaptiveLinesearchParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdaptiveLinesearchParams::GetClassData() const { return &_class_data_; }

void AdaptiveLinesearchParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AdaptiveLinesearchParams *>(to)->MergeFrom(
      static_cast<const AdaptiveLinesearchParams &>(from));
}


void AdaptiveLinesearchParams::MergeFrom(const AdaptiveLinesearchParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.AdaptiveLinesearchParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      step_size_reduction_exponent_ = from.step_size_reduction_exponent_;
    }
    if (cached_has_bits & 0x00000002u) {
      step_size_growth_exponent_ = from.step_size_growth_exponent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdaptiveLinesearchParams::CopyFrom(const AdaptiveLinesearchParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.AdaptiveLinesearchParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptiveLinesearchParams::IsInitialized() const {
  return true;
}

void AdaptiveLinesearchParams::InternalSwap(AdaptiveLinesearchParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(step_size_reduction_exponent_, other->step_size_reduction_exponent_);
  swap(step_size_growth_exponent_, other->step_size_growth_exponent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdaptiveLinesearchParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[1]);
}

// ===================================================================

class MalitskyPockParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MalitskyPockParams>()._has_bits_);
  static void set_has_step_size_downscaling_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_linesearch_contraction_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_step_size_interpolation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MalitskyPockParams::MalitskyPockParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.MalitskyPockParams)
}
MalitskyPockParams::MalitskyPockParams(const MalitskyPockParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&step_size_downscaling_factor_, &from.step_size_downscaling_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_size_interpolation_) -
    reinterpret_cast<char*>(&step_size_downscaling_factor_)) + sizeof(step_size_interpolation_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.MalitskyPockParams)
}

inline void MalitskyPockParams::SharedCtor() {
step_size_downscaling_factor_ = 0.7;
linesearch_contraction_factor_ = 0.99;
step_size_interpolation_ = 1;
}

MalitskyPockParams::~MalitskyPockParams() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.MalitskyPockParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MalitskyPockParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MalitskyPockParams::ArenaDtor(void* object) {
  MalitskyPockParams* _this = reinterpret_cast< MalitskyPockParams* >(object);
  (void)_this;
}
void MalitskyPockParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MalitskyPockParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MalitskyPockParams::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.MalitskyPockParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    step_size_downscaling_factor_ = 0.7;
    linesearch_contraction_factor_ = 0.99;
    step_size_interpolation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MalitskyPockParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double step_size_downscaling_factor = 1 [default = 0.7];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_step_size_downscaling_factor(&has_bits);
          step_size_downscaling_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double linesearch_contraction_factor = 2 [default = 0.99];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_linesearch_contraction_factor(&has_bits);
          linesearch_contraction_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double step_size_interpolation = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_step_size_interpolation(&has_bits);
          step_size_interpolation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MalitskyPockParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.MalitskyPockParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double step_size_downscaling_factor = 1 [default = 0.7];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_step_size_downscaling_factor(), target);
  }

  // optional double linesearch_contraction_factor = 2 [default = 0.99];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_linesearch_contraction_factor(), target);
  }

  // optional double step_size_interpolation = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_step_size_interpolation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.MalitskyPockParams)
  return target;
}

size_t MalitskyPockParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.MalitskyPockParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double step_size_downscaling_factor = 1 [default = 0.7];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double linesearch_contraction_factor = 2 [default = 0.99];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double step_size_interpolation = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MalitskyPockParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MalitskyPockParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MalitskyPockParams::GetClassData() const { return &_class_data_; }

void MalitskyPockParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MalitskyPockParams *>(to)->MergeFrom(
      static_cast<const MalitskyPockParams &>(from));
}


void MalitskyPockParams::MergeFrom(const MalitskyPockParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.MalitskyPockParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      step_size_downscaling_factor_ = from.step_size_downscaling_factor_;
    }
    if (cached_has_bits & 0x00000002u) {
      linesearch_contraction_factor_ = from.linesearch_contraction_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      step_size_interpolation_ = from.step_size_interpolation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MalitskyPockParams::CopyFrom(const MalitskyPockParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.MalitskyPockParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MalitskyPockParams::IsInitialized() const {
  return true;
}

void MalitskyPockParams::InternalSwap(MalitskyPockParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(step_size_downscaling_factor_, other->step_size_downscaling_factor_);
  swap(linesearch_contraction_factor_, other->linesearch_contraction_factor_);
  swap(step_size_interpolation_, other->step_size_interpolation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MalitskyPockParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[2]);
}

// ===================================================================

class PrimalDualHybridGradientParams_PresolveOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<PrimalDualHybridGradientParams_PresolveOptions>()._has_bits_);
  static void set_has_use_glop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::operations_research::glop::GlopParameters& glop_parameters(const PrimalDualHybridGradientParams_PresolveOptions* msg);
  static void set_has_glop_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::operations_research::glop::GlopParameters&
PrimalDualHybridGradientParams_PresolveOptions::_Internal::glop_parameters(const PrimalDualHybridGradientParams_PresolveOptions* msg) {
  return *msg->glop_parameters_;
}
void PrimalDualHybridGradientParams_PresolveOptions::clear_glop_parameters() {
  if (glop_parameters_ != nullptr) glop_parameters_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PrimalDualHybridGradientParams_PresolveOptions::PrimalDualHybridGradientParams_PresolveOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
}
PrimalDualHybridGradientParams_PresolveOptions::PrimalDualHybridGradientParams_PresolveOptions(const PrimalDualHybridGradientParams_PresolveOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_glop_parameters()) {
    glop_parameters_ = new ::operations_research::glop::GlopParameters(*from.glop_parameters_);
  } else {
    glop_parameters_ = nullptr;
  }
  use_glop_ = from.use_glop_;
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
}

inline void PrimalDualHybridGradientParams_PresolveOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&glop_parameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_glop_) -
    reinterpret_cast<char*>(&glop_parameters_)) + sizeof(use_glop_));
}

PrimalDualHybridGradientParams_PresolveOptions::~PrimalDualHybridGradientParams_PresolveOptions() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrimalDualHybridGradientParams_PresolveOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete glop_parameters_;
}

void PrimalDualHybridGradientParams_PresolveOptions::ArenaDtor(void* object) {
  PrimalDualHybridGradientParams_PresolveOptions* _this = reinterpret_cast< PrimalDualHybridGradientParams_PresolveOptions* >(object);
  (void)_this;
}
void PrimalDualHybridGradientParams_PresolveOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrimalDualHybridGradientParams_PresolveOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrimalDualHybridGradientParams_PresolveOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(glop_parameters_ != nullptr);
    glop_parameters_->Clear();
  }
  use_glop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimalDualHybridGradientParams_PresolveOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool use_glop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_use_glop(&has_bits);
          use_glop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.glop.GlopParameters glop_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_glop_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrimalDualHybridGradientParams_PresolveOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_glop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_glop(), target);
  }

  // optional .operations_research.glop.GlopParameters glop_parameters = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::glop_parameters(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  return target;
}

size_t PrimalDualHybridGradientParams_PresolveOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .operations_research.glop.GlopParameters glop_parameters = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *glop_parameters_);
    }

    // optional bool use_glop = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimalDualHybridGradientParams_PresolveOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrimalDualHybridGradientParams_PresolveOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimalDualHybridGradientParams_PresolveOptions::GetClassData() const { return &_class_data_; }

void PrimalDualHybridGradientParams_PresolveOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrimalDualHybridGradientParams_PresolveOptions *>(to)->MergeFrom(
      static_cast<const PrimalDualHybridGradientParams_PresolveOptions &>(from));
}


void PrimalDualHybridGradientParams_PresolveOptions::MergeFrom(const PrimalDualHybridGradientParams_PresolveOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_glop_parameters()->::operations_research::glop::GlopParameters::MergeFrom(from._internal_glop_parameters());
    }
    if (cached_has_bits & 0x00000002u) {
      use_glop_ = from.use_glop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimalDualHybridGradientParams_PresolveOptions::CopyFrom(const PrimalDualHybridGradientParams_PresolveOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimalDualHybridGradientParams_PresolveOptions::IsInitialized() const {
  return true;
}

void PrimalDualHybridGradientParams_PresolveOptions::InternalSwap(PrimalDualHybridGradientParams_PresolveOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrimalDualHybridGradientParams_PresolveOptions, use_glop_)
      + sizeof(PrimalDualHybridGradientParams_PresolveOptions::use_glop_)
      - PROTOBUF_FIELD_OFFSET(PrimalDualHybridGradientParams_PresolveOptions, glop_parameters_)>(
          reinterpret_cast<char*>(&glop_parameters_),
          reinterpret_cast<char*>(&other->glop_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimalDualHybridGradientParams_PresolveOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[3]);
}

// ===================================================================

class PrimalDualHybridGradientParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PrimalDualHybridGradientParams>()._has_bits_);
  static const ::operations_research::pdlp::TerminationCriteria& termination_criteria(const PrimalDualHybridGradientParams* msg);
  static void set_has_termination_criteria(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_num_shards(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_record_iteration_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_verbosity_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_major_iteration_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_termination_check_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_restart_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_primal_weight_update_smoothing(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_initial_primal_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions& presolve_options(const PrimalDualHybridGradientParams* msg);
  static void set_has_presolve_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_l_inf_ruiz_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_l2_norm_rescaling(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sufficient_reduction_for_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_necessary_reduction_for_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_linesearch_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::operations_research::pdlp::AdaptiveLinesearchParams& adaptive_linesearch_parameters(const PrimalDualHybridGradientParams* msg);
  static void set_has_adaptive_linesearch_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::operations_research::pdlp::MalitskyPockParams& malitsky_pock_parameters(const PrimalDualHybridGradientParams* msg);
  static void set_has_malitsky_pock_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_step_size_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_infinite_constraint_bound_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_use_diagonal_qp_trust_region_solver(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_diagonal_qp_trust_region_solver_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::operations_research::pdlp::TerminationCriteria&
PrimalDualHybridGradientParams::_Internal::termination_criteria(const PrimalDualHybridGradientParams* msg) {
  return *msg->termination_criteria_;
}
const ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions&
PrimalDualHybridGradientParams::_Internal::presolve_options(const PrimalDualHybridGradientParams* msg) {
  return *msg->presolve_options_;
}
const ::operations_research::pdlp::AdaptiveLinesearchParams&
PrimalDualHybridGradientParams::_Internal::adaptive_linesearch_parameters(const PrimalDualHybridGradientParams* msg) {
  return *msg->adaptive_linesearch_parameters_;
}
const ::operations_research::pdlp::MalitskyPockParams&
PrimalDualHybridGradientParams::_Internal::malitsky_pock_parameters(const PrimalDualHybridGradientParams* msg) {
  return *msg->malitsky_pock_parameters_;
}
PrimalDualHybridGradientParams::PrimalDualHybridGradientParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  random_projection_seeds_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:operations_research.pdlp.PrimalDualHybridGradientParams)
}
PrimalDualHybridGradientParams::PrimalDualHybridGradientParams(const PrimalDualHybridGradientParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      random_projection_seeds_(from.random_projection_seeds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_termination_criteria()) {
    termination_criteria_ = new ::operations_research::pdlp::TerminationCriteria(*from.termination_criteria_);
  } else {
    termination_criteria_ = nullptr;
  }
  if (from._internal_has_presolve_options()) {
    presolve_options_ = new ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions(*from.presolve_options_);
  } else {
    presolve_options_ = nullptr;
  }
  if (from._internal_has_adaptive_linesearch_parameters()) {
    adaptive_linesearch_parameters_ = new ::operations_research::pdlp::AdaptiveLinesearchParams(*from.adaptive_linesearch_parameters_);
  } else {
    adaptive_linesearch_parameters_ = nullptr;
  }
  if (from._internal_has_malitsky_pock_parameters()) {
    malitsky_pock_parameters_ = new ::operations_research::pdlp::MalitskyPockParams(*from.malitsky_pock_parameters_);
  } else {
    malitsky_pock_parameters_ = nullptr;
  }
  ::memcpy(&initial_primal_weight_, &from.initial_primal_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_step_size_scaling_) -
    reinterpret_cast<char*>(&initial_primal_weight_)) + sizeof(initial_step_size_scaling_));
  // @@protoc_insertion_point(copy_constructor:operations_research.pdlp.PrimalDualHybridGradientParams)
}

inline void PrimalDualHybridGradientParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&termination_criteria_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_shards_) -
    reinterpret_cast<char*>(&termination_criteria_)) + sizeof(num_shards_));
linesearch_rule_ = 1;
num_threads_ = 1;
major_iteration_frequency_ = 64;
termination_check_frequency_ = 64;
restart_strategy_ = 3;
primal_weight_update_smoothing_ = 0.5;
l_inf_ruiz_iterations_ = 5;
l2_norm_rescaling_ = true;
sufficient_reduction_for_restart_ = 0.1;
necessary_reduction_for_restart_ = 0.9;
infinite_constraint_bound_threshold_ = std::numeric_limits<double>::infinity();
diagonal_qp_trust_region_solver_tolerance_ = 1e-08;
initial_step_size_scaling_ = 1;
}

PrimalDualHybridGradientParams::~PrimalDualHybridGradientParams() {
  // @@protoc_insertion_point(destructor:operations_research.pdlp.PrimalDualHybridGradientParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrimalDualHybridGradientParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete termination_criteria_;
  if (this != internal_default_instance()) delete presolve_options_;
  if (this != internal_default_instance()) delete adaptive_linesearch_parameters_;
  if (this != internal_default_instance()) delete malitsky_pock_parameters_;
}

void PrimalDualHybridGradientParams::ArenaDtor(void* object) {
  PrimalDualHybridGradientParams* _this = reinterpret_cast< PrimalDualHybridGradientParams* >(object);
  (void)_this;
}
void PrimalDualHybridGradientParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrimalDualHybridGradientParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrimalDualHybridGradientParams::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.pdlp.PrimalDualHybridGradientParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  random_projection_seeds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(termination_criteria_ != nullptr);
      termination_criteria_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(presolve_options_ != nullptr);
      presolve_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(adaptive_linesearch_parameters_ != nullptr);
      adaptive_linesearch_parameters_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(malitsky_pock_parameters_ != nullptr);
      malitsky_pock_parameters_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&initial_primal_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&verbosity_level_) -
        reinterpret_cast<char*>(&initial_primal_weight_)) + sizeof(verbosity_level_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    num_shards_ = 0;
    linesearch_rule_ = 1;
    num_threads_ = 1;
    major_iteration_frequency_ = 64;
    termination_check_frequency_ = 64;
    restart_strategy_ = 3;
    primal_weight_update_smoothing_ = 0.5;
    l_inf_ruiz_iterations_ = 5;
  }
  if (cached_has_bits & 0x003f0000u) {
    l2_norm_rescaling_ = true;
    sufficient_reduction_for_restart_ = 0.1;
    necessary_reduction_for_restart_ = 0.9;
    infinite_constraint_bound_threshold_ = std::numeric_limits<double>::infinity();
    diagonal_qp_trust_region_solver_tolerance_ = 1e-08;
    initial_step_size_scaling_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimalDualHybridGradientParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .operations_research.pdlp.TerminationCriteria termination_criteria = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_termination_criteria(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_threads = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_threads(&has_bits);
          num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool record_iteration_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_record_iteration_stats(&has_bits);
          record_iteration_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 major_iteration_frequency = 4 [default = 64];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_major_iteration_frequency(&has_bits);
          major_iteration_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 termination_check_frequency = 5 [default = 64];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_termination_check_frequency(&has_bits);
          termination_check_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.PrimalDualHybridGradientParams.RestartStrategy restart_strategy = 6 [default = ADAPTIVE_HEURISTIC];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::PrimalDualHybridGradientParams_RestartStrategy_IsValid(val))) {
            _internal_set_restart_strategy(static_cast<::operations_research::pdlp::PrimalDualHybridGradientParams_RestartStrategy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double primal_weight_update_smoothing = 7 [default = 0.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_primal_weight_update_smoothing(&has_bits);
          primal_weight_update_smoothing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double initial_primal_weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_initial_primal_weight(&has_bits);
          initial_primal_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 l_inf_ruiz_iterations = 9 [default = 5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_l_inf_ruiz_iterations(&has_bits);
          l_inf_ruiz_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool l2_norm_rescaling = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_l2_norm_rescaling(&has_bits);
          l2_norm_rescaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double sufficient_reduction_for_restart = 11 [default = 0.1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_sufficient_reduction_for_restart(&has_bits);
          sufficient_reduction_for_restart_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.PrimalDualHybridGradientParams.LinesearchRule linesearch_rule = 12 [default = ADAPTIVE_LINESEARCH_RULE];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::pdlp::PrimalDualHybridGradientParams_LinesearchRule_IsValid(val))) {
            _internal_set_linesearch_rule(static_cast<::operations_research::pdlp::PrimalDualHybridGradientParams_LinesearchRule>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions presolve_options = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_presolve_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double necessary_reduction_for_restart = 17 [default = 0.9];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_necessary_reduction_for_restart(&has_bits);
          necessary_reduction_for_restart_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.AdaptiveLinesearchParams adaptive_linesearch_parameters = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_adaptive_linesearch_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .operations_research.pdlp.MalitskyPockParams malitsky_pock_parameters = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_malitsky_pock_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double random_projection_seeds = 20 [packed = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_random_projection_seeds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 161) {
          _internal_add_random_projection_seeds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double infinite_constraint_bound_threshold = 22 [default = inf];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_infinite_constraint_bound_threshold(&has_bits);
          infinite_constraint_bound_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_diagonal_qp_trust_region_solver = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_use_diagonal_qp_trust_region_solver(&has_bits);
          use_diagonal_qp_trust_region_solver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double diagonal_qp_trust_region_solver_tolerance = 24 [default = 1e-08];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_diagonal_qp_trust_region_solver_tolerance(&has_bits);
          diagonal_qp_trust_region_solver_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double initial_step_size_scaling = 25 [default = 1];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_initial_step_size_scaling(&has_bits);
          initial_step_size_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 verbosity_level = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_verbosity_level(&has_bits);
          verbosity_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_shards = 27 [default = 0];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_num_shards(&has_bits);
          num_shards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrimalDualHybridGradientParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.pdlp.PrimalDualHybridGradientParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.pdlp.TerminationCriteria termination_criteria = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::termination_criteria(this), target, stream);
  }

  // optional int32 num_threads = 2 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_threads(), target);
  }

  // optional bool record_iteration_stats = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_record_iteration_stats(), target);
  }

  // optional int32 major_iteration_frequency = 4 [default = 64];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_major_iteration_frequency(), target);
  }

  // optional int32 termination_check_frequency = 5 [default = 64];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_termination_check_frequency(), target);
  }

  // optional .operations_research.pdlp.PrimalDualHybridGradientParams.RestartStrategy restart_strategy = 6 [default = ADAPTIVE_HEURISTIC];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_restart_strategy(), target);
  }

  // optional double primal_weight_update_smoothing = 7 [default = 0.5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_primal_weight_update_smoothing(), target);
  }

  // optional double initial_primal_weight = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_initial_primal_weight(), target);
  }

  // optional int32 l_inf_ruiz_iterations = 9 [default = 5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_l_inf_ruiz_iterations(), target);
  }

  // optional bool l2_norm_rescaling = 10 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_l2_norm_rescaling(), target);
  }

  // optional double sufficient_reduction_for_restart = 11 [default = 0.1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sufficient_reduction_for_restart(), target);
  }

  // optional .operations_research.pdlp.PrimalDualHybridGradientParams.LinesearchRule linesearch_rule = 12 [default = ADAPTIVE_LINESEARCH_RULE];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_linesearch_rule(), target);
  }

  // optional .operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions presolve_options = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::presolve_options(this), target, stream);
  }

  // optional double necessary_reduction_for_restart = 17 [default = 0.9];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_necessary_reduction_for_restart(), target);
  }

  // optional .operations_research.pdlp.AdaptiveLinesearchParams adaptive_linesearch_parameters = 18;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::adaptive_linesearch_parameters(this), target, stream);
  }

  // optional .operations_research.pdlp.MalitskyPockParams malitsky_pock_parameters = 19;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::malitsky_pock_parameters(this), target, stream);
  }

  // repeated double random_projection_seeds = 20 [packed = true];
  if (this->_internal_random_projection_seeds_size() > 0) {
    target = stream->WriteFixedPacked(20, _internal_random_projection_seeds(), target);
  }

  // optional double infinite_constraint_bound_threshold = 22 [default = inf];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_infinite_constraint_bound_threshold(), target);
  }

  // optional bool use_diagonal_qp_trust_region_solver = 23 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_use_diagonal_qp_trust_region_solver(), target);
  }

  // optional double diagonal_qp_trust_region_solver_tolerance = 24 [default = 1e-08];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_diagonal_qp_trust_region_solver_tolerance(), target);
  }

  // optional double initial_step_size_scaling = 25 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_initial_step_size_scaling(), target);
  }

  // optional int32 verbosity_level = 26 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_verbosity_level(), target);
  }

  // optional int32 num_shards = 27 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_num_shards(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.pdlp.PrimalDualHybridGradientParams)
  return target;
}

size_t PrimalDualHybridGradientParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.pdlp.PrimalDualHybridGradientParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double random_projection_seeds = 20 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_random_projection_seeds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .operations_research.pdlp.TerminationCriteria termination_criteria = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *termination_criteria_);
    }

    // optional .operations_research.pdlp.PrimalDualHybridGradientParams.PresolveOptions presolve_options = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *presolve_options_);
    }

    // optional .operations_research.pdlp.AdaptiveLinesearchParams adaptive_linesearch_parameters = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adaptive_linesearch_parameters_);
    }

    // optional .operations_research.pdlp.MalitskyPockParams malitsky_pock_parameters = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *malitsky_pock_parameters_);
    }

    // optional double initial_primal_weight = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool record_iteration_stats = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool use_diagonal_qp_trust_region_solver = 23 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional int32 verbosity_level = 26 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_verbosity_level());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 num_shards = 27 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_shards());
    }

    // optional .operations_research.pdlp.PrimalDualHybridGradientParams.LinesearchRule linesearch_rule = 12 [default = ADAPTIVE_LINESEARCH_RULE];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_linesearch_rule());
    }

    // optional int32 num_threads = 2 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_threads());
    }

    // optional int32 major_iteration_frequency = 4 [default = 64];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_major_iteration_frequency());
    }

    // optional int32 termination_check_frequency = 5 [default = 64];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_termination_check_frequency());
    }

    // optional .operations_research.pdlp.PrimalDualHybridGradientParams.RestartStrategy restart_strategy = 6 [default = ADAPTIVE_HEURISTIC];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_restart_strategy());
    }

    // optional double primal_weight_update_smoothing = 7 [default = 0.5];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional int32 l_inf_ruiz_iterations = 9 [default = 5];
    if (cached_has_bits & 0x00008000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_l_inf_ruiz_iterations());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional bool l2_norm_rescaling = 10 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional double sufficient_reduction_for_restart = 11 [default = 0.1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double necessary_reduction_for_restart = 17 [default = 0.9];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double infinite_constraint_bound_threshold = 22 [default = inf];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double diagonal_qp_trust_region_solver_tolerance = 24 [default = 1e-08];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double initial_step_size_scaling = 25 [default = 1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimalDualHybridGradientParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrimalDualHybridGradientParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimalDualHybridGradientParams::GetClassData() const { return &_class_data_; }

void PrimalDualHybridGradientParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrimalDualHybridGradientParams *>(to)->MergeFrom(
      static_cast<const PrimalDualHybridGradientParams &>(from));
}


void PrimalDualHybridGradientParams::MergeFrom(const PrimalDualHybridGradientParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.pdlp.PrimalDualHybridGradientParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  random_projection_seeds_.MergeFrom(from.random_projection_seeds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_termination_criteria()->::operations_research::pdlp::TerminationCriteria::MergeFrom(from._internal_termination_criteria());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_presolve_options()->::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions::MergeFrom(from._internal_presolve_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_adaptive_linesearch_parameters()->::operations_research::pdlp::AdaptiveLinesearchParams::MergeFrom(from._internal_adaptive_linesearch_parameters());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_malitsky_pock_parameters()->::operations_research::pdlp::MalitskyPockParams::MergeFrom(from._internal_malitsky_pock_parameters());
    }
    if (cached_has_bits & 0x00000010u) {
      initial_primal_weight_ = from.initial_primal_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      record_iteration_stats_ = from.record_iteration_stats_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_diagonal_qp_trust_region_solver_ = from.use_diagonal_qp_trust_region_solver_;
    }
    if (cached_has_bits & 0x00000080u) {
      verbosity_level_ = from.verbosity_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      num_shards_ = from.num_shards_;
    }
    if (cached_has_bits & 0x00000200u) {
      linesearch_rule_ = from.linesearch_rule_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_threads_ = from.num_threads_;
    }
    if (cached_has_bits & 0x00000800u) {
      major_iteration_frequency_ = from.major_iteration_frequency_;
    }
    if (cached_has_bits & 0x00001000u) {
      termination_check_frequency_ = from.termination_check_frequency_;
    }
    if (cached_has_bits & 0x00002000u) {
      restart_strategy_ = from.restart_strategy_;
    }
    if (cached_has_bits & 0x00004000u) {
      primal_weight_update_smoothing_ = from.primal_weight_update_smoothing_;
    }
    if (cached_has_bits & 0x00008000u) {
      l_inf_ruiz_iterations_ = from.l_inf_ruiz_iterations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      l2_norm_rescaling_ = from.l2_norm_rescaling_;
    }
    if (cached_has_bits & 0x00020000u) {
      sufficient_reduction_for_restart_ = from.sufficient_reduction_for_restart_;
    }
    if (cached_has_bits & 0x00040000u) {
      necessary_reduction_for_restart_ = from.necessary_reduction_for_restart_;
    }
    if (cached_has_bits & 0x00080000u) {
      infinite_constraint_bound_threshold_ = from.infinite_constraint_bound_threshold_;
    }
    if (cached_has_bits & 0x00100000u) {
      diagonal_qp_trust_region_solver_tolerance_ = from.diagonal_qp_trust_region_solver_tolerance_;
    }
    if (cached_has_bits & 0x00200000u) {
      initial_step_size_scaling_ = from.initial_step_size_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimalDualHybridGradientParams::CopyFrom(const PrimalDualHybridGradientParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.pdlp.PrimalDualHybridGradientParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimalDualHybridGradientParams::IsInitialized() const {
  return true;
}

void PrimalDualHybridGradientParams::InternalSwap(PrimalDualHybridGradientParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  random_projection_seeds_.InternalSwap(&other->random_projection_seeds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrimalDualHybridGradientParams, num_shards_)
      + sizeof(PrimalDualHybridGradientParams::num_shards_)
      - PROTOBUF_FIELD_OFFSET(PrimalDualHybridGradientParams, termination_criteria_)>(
          reinterpret_cast<char*>(&termination_criteria_),
          reinterpret_cast<char*>(&other->termination_criteria_));
  swap(linesearch_rule_, other->linesearch_rule_);
  swap(num_threads_, other->num_threads_);
  swap(major_iteration_frequency_, other->major_iteration_frequency_);
  swap(termination_check_frequency_, other->termination_check_frequency_);
  swap(restart_strategy_, other->restart_strategy_);
  swap(primal_weight_update_smoothing_, other->primal_weight_update_smoothing_);
  swap(l_inf_ruiz_iterations_, other->l_inf_ruiz_iterations_);
  swap(l2_norm_rescaling_, other->l2_norm_rescaling_);
  swap(sufficient_reduction_for_restart_, other->sufficient_reduction_for_restart_);
  swap(necessary_reduction_for_restart_, other->necessary_reduction_for_restart_);
  swap(infinite_constraint_bound_threshold_, other->infinite_constraint_bound_threshold_);
  swap(diagonal_qp_trust_region_solver_tolerance_, other->diagonal_qp_trust_region_solver_tolerance_);
  swap(initial_step_size_scaling_, other->initial_step_size_scaling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimalDualHybridGradientParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_getter, &descriptor_table_ortools_2fpdlp_2fsolvers_2eproto_once,
      file_level_metadata_ortools_2fpdlp_2fsolvers_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pdlp
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::TerminationCriteria* Arena::CreateMaybeMessage< ::operations_research::pdlp::TerminationCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::TerminationCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::AdaptiveLinesearchParams* Arena::CreateMaybeMessage< ::operations_research::pdlp::AdaptiveLinesearchParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::AdaptiveLinesearchParams >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::MalitskyPockParams* Arena::CreateMaybeMessage< ::operations_research::pdlp::MalitskyPockParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::MalitskyPockParams >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions* Arena::CreateMaybeMessage< ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::PrimalDualHybridGradientParams_PresolveOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::pdlp::PrimalDualHybridGradientParams* Arena::CreateMaybeMessage< ::operations_research::pdlp::PrimalDualHybridGradientParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::pdlp::PrimalDualHybridGradientParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
